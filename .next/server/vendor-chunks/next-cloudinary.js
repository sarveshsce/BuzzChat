"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/next-cloudinary";
exports.ids = ["vendor-chunks/next-cloudinary"];
exports.modules = {

/***/ "(ssr)/./node_modules/next-cloudinary/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/next-cloudinary/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CldImage: () => (/* binding */ me),\n/* harmony export */   CldOgImage: () => (/* binding */ ge),\n/* harmony export */   CldUploadButton: () => (/* binding */ Ce),\n/* harmony export */   CldUploadWidget: () => (/* binding */ q),\n/* harmony export */   CldVideoPlayer: () => (/* binding */ Ie),\n/* harmony export */   cloudinaryLoader: () => (/* binding */ ee),\n/* harmony export */   getCldImageUrl: () => (/* binding */ I),\n/* harmony export */   getCldOgImageUrl: () => (/* binding */ $e),\n/* harmony export */   getCldVideoUrl: () => (/* binding */ ae)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/image */ \"(ssr)/./node_modules/next/image.js\");\n/* harmony import */ var _cloudinary_util_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @cloudinary-util/util */ \"(ssr)/./node_modules/@cloudinary-util/util/dist/index.mjs\");\n/* harmony import */ var _cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @cloudinary-util/url-loader */ \"(ssr)/./node_modules/@cloudinary-util/url-loader/dist/index.mjs\");\n/* harmony import */ var next_package_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/package.json */ \"(ssr)/./node_modules/next/package.json\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/head */ \"(ssr)/./node_modules/next/dist/client/components/noop-head.js\");\n/* harmony import */ var next_script__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/script */ \"(ssr)/./node_modules/next/script.js\");\n\n\n\n\nasync function B(e) {\n    let { src: o } = e;\n    try {\n        await new Promise((l, a)=>{\n            fetch(o).then((t)=>{\n                if (!t.ok) {\n                    a(t);\n                    return;\n                }\n                l(t);\n            });\n        });\n    } catch (l) {\n        return l.status === 423 ? await B(e) : !1;\n    }\n    return !0;\n}\nfunction L(e) {\n    if (!e) throw new Error(\"A Cloudinary Cloud name is required, please make sure NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME is set and configured in your environment.\");\n}\n\n\nvar ue = {\n    name: \"next-cloudinary\",\n    version: \"5.18.0\",\n    license: \"MIT\",\n    main: \"./dist/index.js\",\n    module: \"./dist/index.mjs\",\n    types: \"./dist/index.d.ts\",\n    source: \"src/index.ts\",\n    scripts: {\n        build: \"tsup\",\n        dev: \"tsup --watch\",\n        prepublishOnly: \"cp ../README.md . && cp ../LICENSE . && yarn build\",\n        postpublish: \"rm ./README.md && rm ./LICENSE\",\n        test: \"jest\",\n        \"test:app\": 'NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=\"test\" yarn build && cd tests/nextjs-app && yarn build'\n    },\n    dependencies: {\n        \"@cloudinary-util/url-loader\": \"^3.22.0\",\n        \"@cloudinary-util/util\": \"^2.3.0\"\n    },\n    devDependencies: {\n        \"@babel/core\": \"^7.23.2\",\n        \"@babel/preset-env\": \"^7.23.2\",\n        \"@types/jest\": \"^29.5.6\",\n        \"@types/react\": \"^18.2.33\",\n        \"@types/react-dom\": \"^18.2.14\",\n        \"babel-jest\": \"^29.7.0\",\n        dotenv: \"^16.3.1\",\n        jest: \"^29.7.0\",\n        \"jest-environment-jsdom\": \"^29.7.0\",\n        mkdirp: \"^3.0.1\",\n        \"ts-jest\": \"^29.1.1\",\n        tsup: \"^7.2.0\",\n        typescript: \"^5.2.2\"\n    },\n    peerDependencies: {\n        next: \"^12 || ^13 || ^14\",\n        react: \"^17 || ^18\"\n    }\n};\nvar Y = \"V\", $ = ue.version, z = next_package_json__WEBPACK_IMPORTED_MODULE_2__.version;\nfunction I(e, o, l) {\n    var t, r;\n    let a = (r = (t = o == null ? void 0 : o.cloud) == null ? void 0 : t.cloudName) != null ? r : \"oa89cjxc\";\n    return L(a), (0,_cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__.constructCloudinaryUrl)({\n        options: e,\n        config: Object.assign({\n            cloud: {\n                cloudName: a\n            }\n        }, o),\n        analytics: Object.assign({\n            sdkCode: Y,\n            sdkSemver: $,\n            techVersion: z,\n            feature: \"\"\n        }, l)\n    });\n}\nfunction ee({ loaderOptions: e, imageProps: o, cldOptions: l, cldConfig: a = {} }) {\n    let t = {\n        ...o,\n        ...l\n    };\n    t.width = typeof t.width == \"string\" ? parseInt(t.width) : t.width, t.height = typeof t.height == \"string\" ? parseInt(t.height) : t.height;\n    let r;\n    return typeof (e == null ? void 0 : e.width) == \"number\" && typeof t.width == \"number\" && e.width !== t.width ? r = e.width : typeof (e == null ? void 0 : e.width) == \"number\" && typeof (t == null ? void 0 : t.width) != \"number\" && (r = e.width, t.width = r), t.width && r && r < t.width && (t.widthResize = e.width), I(t, a);\n}\nvar ve = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function(o, l) {\n    let a = !1, t = [\n        \"deliveryType\",\n        \"preserveTransformations\",\n        \"strictTransformations\",\n        \"assetType\"\n    ];\n    _cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__.transformationPlugins.forEach(({ props: n = [] })=>{\n        n.forEach((u)=>{\n            if (t.includes(u)) throw new Error(`Option ${u} already exists!`);\n            t.push(u);\n        });\n    });\n    let r = {\n        alt: o.alt,\n        src: o.src\n    };\n    Object.keys(o).filter((n)=>!t.includes(n)).forEach((n)=>r[n] = o[n]);\n    let c = Object.keys(r).map((n)=>`${n}:${r[n]}`).join(\";\"), [C, h] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(c), p = {};\n    if (t.forEach((n)=>{\n        o[n] && (p[n] = o[n] || void 0);\n    }), o.preserveTransformations) try {\n        let n = (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_4__.getTransformations)(o.src).map((u)=>u.join(\",\"));\n        p.rawTransformations = [\n            ...n.flat(),\n            ...o.rawTransformations || []\n        ];\n    } catch (n) {\n        console.warn(`Failed to preserve transformations: ${n.message}`);\n    }\n    let i = {\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"dangerouslyAllowSVG\":false,\"unoptimized\":false,\"domains\":[],\"remotePatterns\":[]} || {};\n    (o.unoptimized === !0 || (i == null ? void 0 : i.unoptimized) === !0) && (r.src = I({\n        ...p,\n        width: r.width,\n        height: r.height,\n        src: r.src,\n        format: \"default\",\n        quality: \"default\"\n    }, o.config));\n    async function U(n) {\n        let u = !0;\n        if (a) return;\n        if (a = !0, typeof o.onError == \"function\") {\n            let P = o.onError(n);\n            typeof P == \"boolean\" && P === !1 && (u = !1);\n        } else typeof o.onError == \"boolean\" && o.onError === !1 && (u = !1);\n        if (u === !1) return;\n        let N = n.target;\n        await B({\n            src: N.src\n        }) && h(`${c};${Date.now()}`);\n    }\n    let O = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(U, [\n        B,\n        c\n    ]), E = next_image__WEBPACK_IMPORTED_MODULE_1__;\n    return \"default\" in E && (E = E.default), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(E, {\n        key: C,\n        ...r,\n        loader: (n)=>ee({\n                loaderOptions: n,\n                imageProps: r,\n                cldOptions: p,\n                cldConfig: o.config\n            }),\n        onError: O,\n        ref: l\n    });\n}), me = ve;\n\n\nvar We = \"summary_large_image\", Ve = ({ excludeTags: e = [], twitterTitle: o, keys: l = {}, ...a })=>{\n    let { alt: t } = a, r = {\n        ...a,\n        crop: a.crop || \"fill\",\n        gravity: a.gravity || \"center\",\n        height: a.height || 1254,\n        src: a.src,\n        width: a.width || 2400,\n        widthResize: a.width || 1200\n    }, c = typeof r.width == \"string\" ? parseInt(r.width) : r.width, C = typeof r.height == \"string\" ? parseInt(r.height) : r.height;\n    typeof C == \"number\" && typeof c == \"number\" && (C = 1200 / c * C), c = 1200;\n    let h = I({\n        ...r,\n        format: a.format || \"jpg\"\n    }), p = I({\n        ...r,\n        format: a.format || \"webp\"\n    }), i = {\n        \"og:image\": \"og-image\",\n        \"og:image:secure_url\": \"og-image-secureurl\",\n        \"og:image:width\": \"og-image-width\",\n        \"og:image:height\": \"og-image-height\",\n        \"og:image:alt\": \"og-image-alt\",\n        \"twitter:title\": \"twitter-title\",\n        \"twitter:card\": \"twitter-card\",\n        \"twitter:image\": \"twitter-image\",\n        ...l\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_head__WEBPACK_IMPORTED_MODULE_5__, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: i[\"og:image\"],\n        property: \"og:image\",\n        content: h\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: i[\"og:image:secure_url\"],\n        property: \"og:image:secure_url\",\n        content: h\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: i[\"og:image:width\"],\n        property: \"og:image:width\",\n        content: `${c}`\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: i[\"og:image:height\"],\n        property: \"og:image:height\",\n        content: `${C}`\n    }), t && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: i[\"og:image:alt\"],\n        property: \"og:image:alt\",\n        content: t\n    }), !e.includes(\"twitter:title\") && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: i[\"twitter:title\"],\n        property: \"twitter:title\",\n        content: o || \" \"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: i[\"twitter:card\"],\n        property: \"twitter:card\",\n        content: We\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: i[\"twitter:image\"],\n        property: \"twitter:image\",\n        content: p\n    }));\n}, ge = Ve;\n\n\n\nfunction fe(e) {\n    return window && \"requestIdleCallback\" in window ? requestIdleCallback(e) : setTimeout(()=>e(), 1);\n}\nvar De = [\n    \"success\",\n    \"display-changed\"\n], Se = {\n    abort: \"onAbort\",\n    \"batch-cancelled\": \"onBatchCancelled\",\n    \"display-changed\": \"onDisplayChanged\",\n    publicid: \"onPublicId\",\n    \"queues-end\": \"onQueuesEnd\",\n    \"queues-start\": \"onQueuesStart\",\n    retry: \"onRetry\",\n    \"show-completed\": \"onShowCompleted\",\n    \"source-changed\": \"onSourceChanged\",\n    success: \"onSuccess\",\n    tags: \"onTags\",\n    \"upload-added\": \"onUploadAdded\"\n}, ke = ({ children: e, onClose: o, onError: l, onOpen: a, onUpload: t, options: r, signatureEndpoint: c, uploadPreset: C, ...h })=>{\n    let p = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), U = !!c, [O, E] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0), [n, u] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0), [N, M] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0), P = {\n        cloudName: \"oa89cjxc\",\n        uploadPreset: C || process.env.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET,\n        apiKey: process.env.NEXT_PUBLIC_CLOUDINARY_API_KEY,\n        ...r\n    };\n    L(\"oa89cjxc\"), U && (P.uploadSignature = w, P.apiKey || console.warn(\"Missing dependency: Signed Upload requires an API key\")), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (typeof n == \"undefined\") return;\n        let d = n.event === \"success\", g = n.event === \"display-changed\" && n.info === \"hidden\";\n        d && typeof t == \"function\" && t(n, i.current), g && typeof o == \"function\" && o(i.current);\n    }, [\n        n\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        O && typeof l == \"function\" && l(O, i.current);\n    }, [\n        O\n    ]);\n    function D() {\n        M(!1), p.current || (p.current = window.cloudinary), fe(()=>{\n            i.current || (i.current = A());\n        });\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>{\n            var d;\n            (d = i.current) == null || d.destroy(), i.current = void 0;\n        }, []);\n    function w(d, g) {\n        if (typeof c == \"undefined\") throw Error(\"Failed to generate signature: signatureEndpoint undefined.\");\n        fetch(c, {\n            method: \"POST\",\n            body: JSON.stringify({\n                paramsToSign: g\n            })\n        }).then((f)=>f.json()).then(({ signature: f })=>{\n            d(f);\n        });\n    }\n    function m(d, g = []) {\n        if (i.current || (i.current = A()), typeof (i == null ? void 0 : i.current[d]) == \"function\") return i.current[d](...g);\n    }\n    function W(d) {\n        m(\"close\", [\n            d\n        ]);\n    }\n    function b(d) {\n        return m(\"destroy\", [\n            d\n        ]);\n    }\n    function S() {\n        m(\"hide\");\n    }\n    function k() {\n        return m(\"isDestroyed\");\n    }\n    function V() {\n        return m(\"isMinimized\");\n    }\n    function F() {\n        return m(\"isShowing\");\n    }\n    function T() {\n        m(\"minimize\");\n    }\n    function H(d, g) {\n        m(\"open\", [\n            d,\n            g\n        ]), typeof a == \"function\" && a(i.current);\n    }\n    function J() {\n        m(\"show\");\n    }\n    function j() {\n        m(\"update\");\n    }\n    let X = {\n        close: W,\n        destroy: b,\n        hide: S,\n        isDestroyed: k,\n        isMinimized: V,\n        isShowing: F,\n        minimize: T,\n        open: H,\n        show: J,\n        update: j\n    };\n    function A() {\n        var d;\n        return (d = p.current) == null ? void 0 : d.createUploadWidget(P, (g, f)=>{\n            if (g && g !== null && E(g), typeof (f == null ? void 0 : f.event) == \"string\") {\n                De.includes(f == null ? void 0 : f.event) && u(f);\n                let x = Se[f.event];\n                if (typeof x == \"string\" && typeof h[x] == \"function\" && typeof h[x]) {\n                    let Z = h[x];\n                    Z(f, {\n                        widget: i.current,\n                        ...X\n                    });\n                }\n            }\n        });\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, typeof e == \"function\" && e({\n        cloudinary: p.current,\n        widget: i.current,\n        results: n,\n        error: O,\n        isLoading: N,\n        ...X\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_script__WEBPACK_IMPORTED_MODULE_6__, {\n        id: `cloudinary-uploadwidget-${Math.floor(Math.random() * 100)}`,\n        src: \"https://upload-widget.cloudinary.com/global/all.js\",\n        onLoad: D,\n        onError: (d)=>console.error(`Failed to load Cloudinary Upload Widget: ${d.message}`)\n    }));\n}, q = ke;\nvar je = ({ className: e, children: o, onClick: l, onError: a, onOpen: t, onUpload: r, onAbort: c, onBatchCancelled: C, onClose: h, onDisplayChanged: p, onPublicId: i, onQueuesEnd: U, onQueuesStart: O, onRetry: E, onShowCompleted: n, onSourceChanged: u, onSuccess: N, onTags: M, onUploadAdded: P, options: D, signatureEndpoint: w, uploadPreset: m, ...W })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(q, {\n        onError: a,\n        onOpen: t,\n        onUpload: r,\n        onAbort: c,\n        onBatchCancelled: C,\n        onClose: h,\n        onDisplayChanged: p,\n        onPublicId: i,\n        onQueuesEnd: U,\n        onQueuesStart: O,\n        onRetry: E,\n        onShowCompleted: n,\n        onSourceChanged: u,\n        onSuccess: N,\n        onTags: M,\n        onUploadAdded: P,\n        options: D,\n        signatureEndpoint: w,\n        uploadPreset: m\n    }, ({ open: b, isLoading: S })=>{\n        function k(V) {\n            V.preventDefault(), b(), typeof l == \"function\" && l(V);\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n            ...W,\n            className: e || \"\",\n            onClick: k,\n            disabled: S\n        }, o || \"Upload\");\n    })), Ce = je;\n\n\n\n\n\nfunction ae(e, o, l) {\n    var t, r;\n    let a = (r = (t = o == null ? void 0 : o.cloud) == null ? void 0 : t.cloudName) != null ? r : \"oa89cjxc\";\n    return L(a), (0,_cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__.constructCloudinaryUrl)({\n        options: {\n            assetType: \"video\",\n            ...e\n        },\n        config: Object.assign({\n            cloud: {\n                cloudName: a\n            }\n        }, o),\n        analytics: Object.assign({\n            sdkCode: Y,\n            sdkSemver: $,\n            techVersion: z,\n            feature: \"\"\n        }, l)\n    });\n}\nvar Q = [], he = \"1.10.4\", Ye = (e)=>{\n    let { autoPlay: o, autoplay: l, className: a, colors: t, controls: r = !0, fontFace: c, height: C, id: h, language: p, languages: i, logo: U = !0, loop: O = !1, muted: E = !1, onDataLoad: n, onError: u, onMetadataLoad: N, onPause: M, onPlay: P, onEnded: D, poster: w, src: m, sourceTypes: W, transformation: b, quality: S = \"auto\", width: k, ...V } = e, F = Array.isArray(b) ? b : [\n        b\n    ], T = m || \"\";\n    if (T.startsWith(\"http\")) try {\n        let s = (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_4__.parseUrl)(m);\n        typeof (s == null ? void 0 : s.publicId) == \"string\" && (T = s == null ? void 0 : s.publicId);\n    } catch (s) {}\n    F.unshift({\n        quality: S\n    });\n    let H = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), J = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), j = e.videoRef || J, X = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), A = e.playerRef || X, d = h || `player-${T.replace(\"/\", \"-\")}`, g = \"cld-video-player cld-fluid\";\n    a && (g = `${g} ${a}`), Q.filter((s)=>s === d).length > 1 ? console.warn(`Multiple instances of the same video detected on the\n     page which may cause some features to not work. \n    Try adding a unique id to each player.`) : Q.push(d);\n    let x = {\n        error: u,\n        loadeddata: n,\n        loadedmetadata: N,\n        pause: M,\n        play: P,\n        ended: D\n    };\n    function Z(s) {\n        let y = x[s.type];\n        typeof y == \"function\" && y(Oe());\n    }\n    L(\"oa89cjxc\");\n    function Ue() {\n        if (\"cloudinary\" in window) {\n            H.current = window.cloudinary;\n            let s = {};\n            typeof U == \"boolean\" ? s.showLogo = U : typeof U == \"object\" && (s = {\n                ...s,\n                showLogo: !0,\n                logoImageUrl: U.imageUrl,\n                logoOnclickUrl: U.onClickUrl\n            });\n            let y = l || o, le = !1, se;\n            o && \"development\" === \"development\" && console.warn('Prop autoPlay will be removed in future versions, please use autoplay (lowercase \"p\")'), (typeof y == \"boolean\" || y === \"true\" || y === \"false\") && (le = y), typeof y == \"string\" && y !== \"true\" && y !== \"false\" && (se = y);\n            let G = {\n                autoplayMode: se,\n                autoplay: le,\n                cloud_name: \"oa89cjxc\",\n                controls: r,\n                fontFace: c || \"\",\n                language: p,\n                languages: i,\n                loop: O,\n                muted: E,\n                publicId: T,\n                transformation: F,\n                ...s,\n                ...V\n            };\n            Array.isArray(W) && (G.sourceTypes = W), typeof t == \"object\" && (G.colors = t), typeof w == \"string\" ? G.posterOptions = {\n                publicId: w\n            } : typeof w == \"object\" && (typeof w.src != \"string\" ? G.posterOptions = {\n                publicId: ae({\n                    ...w,\n                    src: T,\n                    format: \"auto:image\"\n                })\n            } : G.posterOptions = {\n                publicId: I(w)\n            }), A.current = H.current.videoPlayer(j.current, G), Object.keys(x).forEach((ce)=>{\n                var pe;\n                typeof x[ce] == \"function\" && ((pe = A.current) == null || pe.on(ce, Z));\n            });\n        }\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>{\n            var s;\n            (s = A.current) == null || s.videojs.cloudinary.dispose(), Q = Q.filter((y)=>y !== d);\n        }, []);\n    function Oe() {\n        return {\n            player: A.current,\n            video: j.current\n        };\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_head__WEBPACK_IMPORTED_MODULE_5__, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"link\", {\n        href: `https://unpkg.com/cloudinary-video-player@${he}/dist/cld-video-player.min.css`,\n        rel: \"stylesheet\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"100%\",\n            aspectRatio: `${e.width} / ${e.height}`\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"video\", {\n        ref: j,\n        id: d,\n        className: g,\n        width: k,\n        height: C\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_script__WEBPACK_IMPORTED_MODULE_6__, {\n        id: `cloudinary-videoplayer-${d}-${Math.floor(Math.random() * 100)}`,\n        src: `https://unpkg.com/cloudinary-video-player@${he}/dist/cld-video-player.min.js`,\n        onLoad: Ue,\n        onError: (s)=>console.error(`Failed to load Cloudinary Video Player: ${s.message}`)\n    })));\n}, Ie = Ye;\nfunction $e(e) {\n    return I({\n        ...e,\n        crop: e.crop || \"fill\",\n        format: e.format || \"jpg\",\n        gravity: e.gravity || \"center\",\n        height: e.height || 1254,\n        width: e.width || 2400,\n        widthResize: e.width || 1200\n    });\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next-cloudinary/dist/index.mjs\n");

/***/ })

};
;