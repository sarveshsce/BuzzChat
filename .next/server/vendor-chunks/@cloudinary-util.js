"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@cloudinary-util";
exports.ids = ["vendor-chunks/@cloudinary-util"];
exports.modules = {

/***/ "(ssr)/./node_modules/@cloudinary-util/url-loader/dist/index.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@cloudinary-util/url-loader/dist/index.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   constructCloudinaryUrl: () => (/* binding */ constructCloudinaryUrl),\n/* harmony export */   effects: () => (/* binding */ effects),\n/* harmony export */   position: () => (/* binding */ position),\n/* harmony export */   primary: () => (/* binding */ primary),\n/* harmony export */   text: () => (/* binding */ text),\n/* harmony export */   transformationPlugins: () => (/* binding */ transformationPlugins)\n/* harmony export */ });\n/* harmony import */ var _cloudinary_url_gen__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cloudinary/url-gen */ \"(ssr)/./node_modules/@cloudinary/url-gen/instance/Cloudinary.js\");\n/* harmony import */ var _cloudinary_util_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cloudinary-util/util */ \"(ssr)/./node_modules/@cloudinary-util/util/dist/index.mjs\");\nvar __defProp = Object.defineProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\n// src/lib/cloudinary.ts\n\n\n// src/plugins/cropping.ts\nvar cropping_exports = {};\n__export(cropping_exports, {\n    assetTypes: ()=>assetTypes,\n    normalizeNumberParameter: ()=>normalizeNumberParameter,\n    plugin: ()=>plugin,\n    props: ()=>props\n});\nvar cropsAspectRatio = [\n    \"crop\",\n    \"fill\",\n    \"lfill\",\n    \"fill_pad\",\n    \"thumb\"\n];\nvar cropsGravityAuto = [\n    \"crop\",\n    \"fill\",\n    \"lfill\",\n    \"fill_pad\",\n    \"thumb\"\n];\nvar cropsWithZoom = [\n    \"crop\",\n    \"thumb\"\n];\nvar props = [\n    \"aspectRatio\",\n    \"crop\",\n    \"gravity\",\n    \"zoom\"\n];\nvar assetTypes = [\n    \"image\",\n    \"images\",\n    \"video\",\n    \"videos\"\n];\nfunction normalizeNumberParameter(param) {\n    if (typeof param !== \"string\") return param;\n    return parseInt(param);\n}\nfunction plugin(props20) {\n    const { cldAsset, options } = props20;\n    const { aspectRatio, width: defaultWidth, height: defaultHeight, widthResize: defaultWidthResize, crop = \"limit\" } = options;\n    const overrides = {\n        width: void 0\n    };\n    let height = normalizeNumberParameter(defaultHeight);\n    let width = normalizeNumberParameter(defaultWidth);\n    let widthResize = normalizeNumberParameter(defaultWidthResize);\n    const hasDefinedDimensions = height || width;\n    const hasValidAspectRatio = aspectRatio && cropsAspectRatio.includes(crop);\n    let transformationString = \"\";\n    if (crop && (hasDefinedDimensions || hasValidAspectRatio)) {\n        transformationString = `c_${crop}`;\n    }\n    if (hasValidAspectRatio) {\n        transformationString = `${transformationString},ar_${aspectRatio}`;\n    }\n    if (width) {\n        transformationString = `${transformationString},w_${width}`;\n    }\n    if (!options.gravity && cropsGravityAuto.includes(crop)) {\n        options.gravity = \"auto\";\n    }\n    if (![\n        \"limit\"\n    ].includes(crop) && typeof height === \"number\") {\n        transformationString = `${transformationString},h_${height}`;\n    }\n    if (options.gravity) {\n        if (options.gravity === \"auto\" && !cropsGravityAuto.includes(crop)) {\n            console.warn(`Auto gravity can only be used with crop modes: ${cropsGravityAuto.join(\", \")}. Not applying gravity.`);\n        } else {\n            transformationString = `${transformationString},g_${options.gravity}`;\n        }\n    }\n    if (options.zoom) {\n        if (options.zoom === \"auto\" && !cropsWithZoom.includes(crop)) {\n            console.warn(`Zoom can only be used with crop modes: ${cropsWithZoom.join(\", \")}. Not applying zoom.`);\n        } else {\n            transformationString = `${transformationString},z_${options.zoom}`;\n        }\n    }\n    cldAsset.effect(transformationString);\n    if (widthResize) {\n        overrides.width = widthResize;\n    }\n    return {\n        options: overrides\n    };\n}\n// src/plugins/default-image.ts\nvar default_image_exports = {};\n__export(default_image_exports, {\n    assetTypes: ()=>assetTypes2,\n    plugin: ()=>plugin2,\n    props: ()=>props2\n});\n\nvar props2 = [\n    \"default\"\n];\nvar assetTypes2 = [\n    \"image\",\n    \"images\"\n];\nfunction plugin2(props20) {\n    const { cldAsset, options } = props20;\n    const { defaultImage } = options;\n    if (typeof defaultImage === \"string\") {\n        if (!(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_0__.getFormat)(defaultImage)) {\n            console.warn(`The defaultImage prop may be missing a format and must include it along with the public ID. (Ex: myimage.jpg)`);\n        }\n        const defaultImageId = defaultImage.replace(/\\//g, \":\");\n        cldAsset.addTransformation(`d_${defaultImageId}`);\n    }\n    return {};\n}\n// src/plugins/effects.ts\nvar effects_exports = {};\n__export(effects_exports, {\n    assetTypes: ()=>assetTypes3,\n    plugin: ()=>plugin3,\n    props: ()=>props3\n});\n// src/constants/qualifiers.ts\n\nvar convertersColors = [\n    {\n        test: _cloudinary_util_util__WEBPACK_IMPORTED_MODULE_0__.testColorIsHex,\n        convert: _cloudinary_util_util__WEBPACK_IMPORTED_MODULE_0__.convertColorHexToRgb\n    }\n];\nvar primary = {\n    aspectRatio: {\n        qualifier: \"ar\"\n    },\n    crop: {\n        qualifier: \"c\"\n    },\n    gravity: {\n        qualifier: \"g\"\n    },\n    height: {\n        qualifier: \"h\"\n    },\n    width: {\n        qualifier: \"w\"\n    }\n};\nvar position = {\n    angle: {\n        qualifier: \"a\"\n    },\n    gravity: {\n        qualifier: \"g\"\n    },\n    x: {\n        qualifier: \"x\"\n    },\n    y: {\n        qualifier: \"y\"\n    }\n};\nvar text = {\n    alignment: {\n        qualifier: false,\n        order: 6\n    },\n    antialias: {\n        qualifier: \"antialias\"\n    },\n    border: {\n        qualifier: \"bo\",\n        location: \"primary\"\n    },\n    color: {\n        qualifier: \"co\",\n        location: \"primary\",\n        converters: convertersColors\n    },\n    fontFamily: {\n        qualifier: false,\n        order: 1\n    },\n    fontSize: {\n        qualifier: false,\n        order: 2\n    },\n    fontStyle: {\n        qualifier: false,\n        order: 4\n    },\n    fontWeight: {\n        qualifier: false,\n        order: 3\n    },\n    hinting: {\n        qualifier: \"hinting\"\n    },\n    letterSpacing: {\n        qualifier: \"letter_spacing\"\n    },\n    lineSpacing: {\n        qualifier: \"line_spacing\"\n    },\n    stroke: {\n        qualifier: \"self\",\n        order: 7\n    },\n    textDecoration: {\n        qualifier: false,\n        order: 5\n    }\n};\nvar effects = {\n    art: {\n        prefix: \"e\",\n        qualifier: \"art\"\n    },\n    autoBrightness: {\n        prefix: \"e\",\n        qualifier: \"auto_brightness\"\n    },\n    autoColor: {\n        prefix: \"e\",\n        qualifier: \"auto_color\"\n    },\n    autoContrast: {\n        prefix: \"e\",\n        qualifier: \"auto_contrast\"\n    },\n    assistColorblind: {\n        prefix: \"e\",\n        qualifier: \"assist_colorblind\"\n    },\n    background: {\n        qualifier: \"b\"\n    },\n    blackwhite: {\n        prefix: \"e\",\n        qualifier: \"blackwhite\"\n    },\n    blur: {\n        prefix: \"e\",\n        qualifier: \"blur\"\n    },\n    blurFaces: {\n        prefix: \"e\",\n        qualifier: \"blur_faces\"\n    },\n    blurRegion: {\n        prefix: \"e\",\n        qualifier: \"blur_region\"\n    },\n    border: {\n        qualifier: \"bo\"\n    },\n    brightness: {\n        prefix: \"e\",\n        qualifier: \"brightness\"\n    },\n    brightnessHSB: {\n        prefix: \"e\",\n        qualifier: \"brightness_hsb\"\n    },\n    cartoonify: {\n        prefix: \"e\",\n        qualifier: \"cartoonify\"\n    },\n    color: {\n        qualifier: \"co\",\n        converters: convertersColors\n    },\n    colorize: {\n        prefix: \"e\",\n        qualifier: \"colorize\"\n    },\n    contrast: {\n        prefix: \"e\",\n        qualifier: \"contrast\"\n    },\n    distort: {\n        prefix: \"e\",\n        qualifier: \"distort\"\n    },\n    fillLight: {\n        prefix: \"e\",\n        qualifier: \"fill_light\"\n    },\n    gamma: {\n        prefix: \"e\",\n        qualifier: \"gamma\"\n    },\n    gradientFade: {\n        prefix: \"e\",\n        qualifier: \"gradient_fade\"\n    },\n    grayscale: {\n        prefix: \"e\",\n        qualifier: \"grayscale\"\n    },\n    improve: {\n        prefix: \"e\",\n        qualifier: \"improve\"\n    },\n    multiply: {\n        prefix: \"e\",\n        qualifier: \"multiply\"\n    },\n    negate: {\n        prefix: \"e\",\n        qualifier: \"negate\"\n    },\n    oilPaint: {\n        prefix: \"e\",\n        qualifier: \"oil_paint\"\n    },\n    opacity: {\n        qualifier: \"o\"\n    },\n    outline: {\n        prefix: \"e\",\n        qualifier: \"outline\"\n    },\n    overlay: {\n        prefix: \"e\",\n        qualifier: \"overlay\"\n    },\n    pixelate: {\n        prefix: \"e\",\n        qualifier: \"pixelate\"\n    },\n    pixelateFaces: {\n        prefix: \"e\",\n        qualifier: \"pixelate_faces\"\n    },\n    pixelateRegion: {\n        prefix: \"e\",\n        qualifier: \"pixelate_region\"\n    },\n    radius: {\n        qualifier: \"r\"\n    },\n    redeye: {\n        prefix: \"e\",\n        qualifier: \"redeye\"\n    },\n    replaceColor: {\n        prefix: \"e\",\n        qualifier: \"replace_color\"\n    },\n    saturation: {\n        prefix: \"e\",\n        qualifier: \"saturation\"\n    },\n    screen: {\n        prefix: \"e\",\n        qualifier: \"screen\"\n    },\n    sepia: {\n        prefix: \"e\",\n        qualifier: \"sepia\"\n    },\n    shadow: {\n        prefix: \"e\",\n        qualifier: \"shadow\"\n    },\n    sharpen: {\n        prefix: \"e\",\n        qualifier: \"sharpen\"\n    },\n    shear: {\n        prefix: \"e\",\n        qualifier: \"shear\"\n    },\n    simulateColorblind: {\n        prefix: \"e\",\n        qualifier: \"simulate_colorblind\"\n    },\n    tint: {\n        prefix: \"e\",\n        qualifier: \"tint\"\n    },\n    trim: {\n        prefix: \"e\",\n        qualifier: \"trim\"\n    },\n    unsharpMask: {\n        prefix: \"e\",\n        qualifier: \"unsharp_mask\"\n    },\n    vectorize: {\n        prefix: \"e\",\n        qualifier: \"vectorize\"\n    },\n    vibrance: {\n        prefix: \"e\",\n        qualifier: \"vibrance\"\n    },\n    vignette: {\n        prefix: \"e\",\n        qualifier: \"vignette\"\n    }\n};\nvar flags = {\n    animated: {\n        prefix: \"fl\",\n        qualifier: \"animated\"\n    },\n    anyFormat: {\n        prefix: \"fl\",\n        qualifier: \"any_format\"\n    },\n    apng: {\n        prefix: \"fl\",\n        qualifier: \"apng\"\n    },\n    attachment: {\n        prefix: \"fl\",\n        qualifier: \"attachment\"\n    },\n    awebp: {\n        prefix: \"fl\",\n        qualifier: \"awebp\"\n    },\n    clip: {\n        prefix: \"fl\",\n        qualifier: \"clip\"\n    },\n    clipEvenodd: {\n        prefix: \"fl\",\n        qualifier: \"clip_evenodd\"\n    },\n    cutter: {\n        prefix: \"fl\",\n        qualifier: \"cutter\"\n    },\n    draco: {\n        prefix: \"fl\",\n        qualifier: \"draco\"\n    },\n    forceIcc: {\n        prefix: \"fl\",\n        qualifier: \"force_icc\"\n    },\n    forceStrip: {\n        prefix: \"fl\",\n        qualifier: \"force_strip\"\n    },\n    getinfo: {\n        prefix: \"fl\",\n        qualifier: \"getinfo\"\n    },\n    group4: {\n        prefix: \"fl\",\n        qualifier: \"group4\"\n    },\n    hlsv3: {\n        prefix: \"fl\",\n        qualifier: \"hlsv3\"\n    },\n    ignoreAspectRatio: {\n        prefix: \"fl\",\n        qualifier: \"ignore_aspect_ratio\"\n    },\n    ignoreMaskChannels: {\n        prefix: \"fl\",\n        qualifier: \"ignore_mask_channels\"\n    },\n    immutableCache: {\n        prefix: \"fl\",\n        qualifier: \"immutable_cache\"\n    },\n    keepAttribution: {\n        prefix: \"fl\",\n        qualifier: \"keep_attribution\"\n    },\n    keepDar: {\n        prefix: \"fl\",\n        qualifier: \"keep_dar\"\n    },\n    keepIptc: {\n        prefix: \"fl\",\n        qualifier: \"keep_iptc\"\n    },\n    layerApply: {\n        prefix: \"fl\",\n        qualifier: \"layer_apply\"\n    },\n    lossy: {\n        prefix: \"fl\",\n        qualifier: \"lossy\"\n    },\n    mono: {\n        prefix: \"fl\",\n        qualifier: \"mono\"\n    },\n    noOverflow: {\n        prefix: \"fl\",\n        qualifier: \"no_overflow\"\n    },\n    noStream: {\n        prefix: \"fl\",\n        qualifier: \"no_stream\"\n    },\n    png8: {\n        prefix: \"fl\",\n        qualifier: \"png8\"\n    },\n    png24: {\n        prefix: \"fl\",\n        qualifier: \"png24\"\n    },\n    png32: {\n        prefix: \"fl\",\n        qualifier: \"png32\"\n    },\n    preserveTransparency: {\n        prefix: \"fl\",\n        qualifier: \"preserve_transparency\"\n    },\n    progressive: {\n        prefix: \"fl\",\n        qualifier: \"progressive\"\n    },\n    rasterize: {\n        prefix: \"fl\",\n        qualifier: \"rasterize\"\n    },\n    regionRelative: {\n        prefix: \"fl\",\n        qualifier: \"region_relative\"\n    },\n    relative: {\n        prefix: \"fl\",\n        qualifier: \"relative\",\n        location: \"primary\"\n    },\n    replaceImage: {\n        prefix: \"fl\",\n        qualifier: \"replace_image\"\n    },\n    sanitize: {\n        prefix: \"fl\",\n        qualifier: \"sanitize\"\n    },\n    splice: {\n        prefix: \"fl\",\n        qualifier: \"splice\"\n    },\n    streamingAttachment: {\n        prefix: \"fl\",\n        qualifier: \"streaming_attachment\"\n    },\n    stripProfile: {\n        prefix: \"fl\",\n        qualifier: \"strip_profile\"\n    },\n    textDisallowOverflow: {\n        prefix: \"fl\",\n        qualifier: \"text_disallow_overflow\"\n    },\n    textNoTrim: {\n        prefix: \"fl\",\n        qualifier: \"text_no_trim\"\n    },\n    tif8Lzw: {\n        prefix: \"fl\",\n        qualifier: \"tif8_lzw\"\n    },\n    tiled: {\n        prefix: \"fl\",\n        qualifier: \"tiled\"\n    },\n    truncateTs: {\n        prefix: \"fl\",\n        qualifier: \"truncate_ts\"\n    },\n    waveform: {\n        prefix: \"fl\",\n        qualifier: \"waveform\"\n    }\n};\nvar video = {\n    streamingProfile: {\n        qualifier: \"sp\",\n        location: \"primary\"\n    }\n};\n// src/lib/transformations.ts\nfunction constructTransformation({ prefix, qualifier, value, converters }) {\n    let transformation = \"\";\n    if (prefix) {\n        transformation = `${prefix}_`;\n    }\n    let transformationValue = value;\n    converters == null ? void 0 : converters.forEach(({ test, convert })=>{\n        if (!test(transformationValue)) return;\n        transformationValue = convert(transformationValue);\n    });\n    if (transformationValue === true || transformationValue === \"true\") {\n        return `${transformation}${qualifier}`;\n    }\n    if (typeof transformationValue === \"string\" || typeof transformationValue === \"number\") {\n        if (prefix) {\n            return `${transformation}${qualifier}:${transformationValue}`;\n        } else {\n            return `${qualifier}_${transformationValue}`;\n        }\n    }\n}\nfunction promptArrayToString(promptArray) {\n    return `(${promptArray.join(\";\")})`;\n}\n// src/plugins/effects.ts\nvar props3 = [\n    ...Object.keys(effects),\n    \"effects\"\n];\nvar assetTypes3 = [\n    \"image\",\n    \"images\",\n    \"video\",\n    \"videos\"\n];\nfunction plugin3(props20) {\n    const { cldAsset, options } = props20;\n    const transformationStrings = constructTransformationString({\n        effects,\n        options\n    });\n    transformationStrings.filter((t)=>!!t).forEach((transformation)=>cldAsset.effect(transformation));\n    ;\n    if (Array.isArray(options == null ? void 0 : options.effects)) {\n        options == null ? void 0 : options.effects.forEach((effectsSet)=>{\n            const transformationString = constructTransformationString({\n                effects,\n                options: effectsSet\n            }).filter((t)=>!!t).join(\",\");\n            cldAsset.effect(transformationString);\n        });\n    }\n    function constructTransformationString({ effects: effects2, options: options2 }) {\n        return Object.keys(effects2).map((key)=>{\n            const { prefix, qualifier, converters } = effects2[key];\n            return constructTransformation({\n                qualifier,\n                prefix,\n                value: options2 == null ? void 0 : options2[key],\n                converters\n            });\n        });\n    }\n    return {};\n}\n// src/plugins/flags.ts\nvar flags_exports = {};\n__export(flags_exports, {\n    assetTypes: ()=>assetTypes4,\n    plugin: ()=>plugin4,\n    props: ()=>props4\n});\nvar props4 = [\n    \"flags\"\n];\nvar assetTypes4 = [\n    \"image\",\n    \"images\",\n    \"video\",\n    \"videos\"\n];\nvar supportedFlags = Object.entries(flags).map(([_, { qualifier }])=>qualifier);\nfunction plugin4(props20) {\n    const { cldAsset, options } = props20;\n    const { flags: flags2 = [] } = options;\n    if (Array.isArray(flags2) && flags2.length > 0) {\n        flags2.forEach((flag)=>{\n            if (!supportedFlags.includes(flag)) return;\n            cldAsset.addFlag(flag);\n        });\n    } else if (typeof flags2 === \"object\") {\n        Object.entries(flags2).forEach(([qualifier, value])=>{\n            if (!supportedFlags.includes(qualifier)) return;\n            cldAsset.addTransformation(`fl_${qualifier}:${value}`);\n        });\n    }\n    return {};\n}\n// src/plugins/fill-background.ts\nvar fill_background_exports = {};\n__export(fill_background_exports, {\n    assetTypes: ()=>assetTypes5,\n    plugin: ()=>plugin5,\n    props: ()=>props5\n});\nvar props5 = [\n    \"fillBackground\"\n];\nvar assetTypes5 = [\n    \"image\",\n    \"images\"\n];\nvar defaultCrop = \"pad\";\nfunction plugin5(props20) {\n    const { cldAsset, options } = props20;\n    const { fillBackground } = options;\n    if (fillBackground === true) {\n        const properties = [\n            \"b_gen_fill\",\n            `ar_${options.width}:${options.height}`,\n            `w_${options.width}`,\n            `c_${defaultCrop}`\n        ];\n        cldAsset.addTransformation(properties.join(\",\"));\n    } else if (typeof fillBackground === \"object\") {\n        const { crop = defaultCrop, gravity, prompt } = fillBackground;\n        const properties = [\n            `ar_${options.width}:${options.height}`,\n            `w_${options.width}`,\n            `c_${crop}`\n        ];\n        if (typeof prompt === \"string\") {\n            properties.unshift(`b_gen_fill:${prompt}`);\n        } else {\n            properties.unshift(`b_gen_fill`);\n        }\n        if (typeof gravity === \"string\") {\n            properties.push(`g_${gravity}`);\n        }\n        cldAsset.addTransformation(properties.join(\",\"));\n    }\n    return {};\n}\n// src/plugins/generative-replace.ts\nvar generative_replace_exports = {};\n__export(generative_replace_exports, {\n    assetTypes: ()=>assetTypes6,\n    plugin: ()=>plugin6,\n    props: ()=>props6\n});\nvar props6 = [\n    \"replace\"\n];\nvar assetTypes6 = [\n    \"image\",\n    \"images\"\n];\nfunction plugin6(props20) {\n    const { cldAsset, options } = props20;\n    const { replace = null } = options;\n    if (replace) {\n        let from, to, preserveGeometry = false;\n        if (Array.isArray(replace)) {\n            from = replace[0];\n            to = replace[1];\n            preserveGeometry = replace[2] || false;\n        } else {\n            from = replace.from;\n            to = replace.to;\n            preserveGeometry = replace.preserveGeometry || false;\n        }\n        const properties = [\n            `e_gen_replace:from_${from}`,\n            `to_${to}`\n        ];\n        if (preserveGeometry) {\n            properties.push(`preserve-geometry_${preserveGeometry}`);\n        }\n        cldAsset.effect(properties.join(\";\"));\n    }\n    return {};\n}\n// src/plugins/named-transformations.ts\nvar named_transformations_exports = {};\n__export(named_transformations_exports, {\n    assetTypes: ()=>assetTypes7,\n    plugin: ()=>plugin7,\n    props: ()=>props7,\n    strict: ()=>strict\n});\nvar props7 = [\n    \"transformations\"\n];\nvar assetTypes7 = [\n    \"image\",\n    \"images\",\n    \"video\",\n    \"videos\"\n];\nvar strict = true;\nfunction plugin7(props20) {\n    const { cldAsset, options } = props20;\n    let { transformations = [] } = options;\n    if (!Array.isArray(transformations)) {\n        transformations = [\n            transformations\n        ];\n    }\n    transformations.forEach((transformation)=>{\n        cldAsset.addTransformation(`t_${transformation}`);\n    });\n    return {};\n}\n// src/plugins/overlays.ts\nvar overlays_exports = {};\n__export(overlays_exports, {\n    DEFAULT_TEXT_OPTIONS: ()=>DEFAULT_TEXT_OPTIONS,\n    assetTypes: ()=>assetTypes8,\n    plugin: ()=>plugin8,\n    props: ()=>props8\n});\n\nvar props8 = [\n    \"text\",\n    \"overlays\"\n];\nvar assetTypes8 = [\n    \"image\",\n    \"images\",\n    \"video\",\n    \"videos\"\n];\nvar DEFAULT_TEXT_OPTIONS = {\n    color: \"black\",\n    fontFamily: \"Arial\",\n    fontSize: 200,\n    fontWeight: \"bold\"\n};\nvar supportedFlags2 = Object.entries(flags).map(([_, { qualifier }])=>qualifier);\nfunction plugin8(props20) {\n    const { cldAsset, options } = props20;\n    const { text: text2, overlays = [] } = options;\n    const type = \"overlay\";\n    const typeQualifier = \"l\";\n    if (Array.isArray(overlays)) {\n        overlays.forEach(applyOverlay);\n    }\n    if (typeof text2 === \"string\") {\n        applyOverlay({\n            text: {\n                ...DEFAULT_TEXT_OPTIONS,\n                text: text2\n            }\n        });\n    } else if (typeof text2 === \"object\") {\n        applyOverlay({\n            text: {\n                ...DEFAULT_TEXT_OPTIONS,\n                ...text2\n            }\n        });\n    }\n    function applyOverlay({ publicId, url, position: position2, text: text3, effects: layerEffects = [], appliedEffects = [], flags: layerFlags = [], appliedFlags = [], ...options2 }) {\n        var _a;\n        const hasPublicId = typeof publicId === \"string\";\n        const hasUrl = typeof url === \"string\";\n        const hasText = typeof text3 === \"object\" || typeof text3 === \"string\";\n        const hasPosition = typeof position2 === \"object\";\n        if (!hasPublicId && !hasUrl && !hasText) {\n            console.warn(`An ${type} is missing Public ID, URL, or Text`);\n            return;\n        }\n        let layerTransformation;\n        if (hasText) {\n            layerTransformation = `${typeQualifier}_text`;\n        } else if (hasPublicId) {\n            layerTransformation = `${typeQualifier}_${publicId.replace(/\\//g, \":\")}`;\n        } else if (hasUrl) {\n            layerTransformation = `${typeQualifier}_fetch:${(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_0__.encodeBase64)(url)}`;\n        }\n        const primary2 = [];\n        const applied = [];\n        Object.keys(options2).forEach((key)=>{\n            if (!(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_0__.objectHasKey)(primary, key)) return;\n            const { qualifier, converters } = primary[key];\n            const transformation = constructTransformation({\n                qualifier,\n                value: options2[key],\n                converters\n            });\n            if (transformation) {\n                primary2.push(transformation);\n            }\n        });\n        layerEffects.forEach((effect)=>{\n            Object.keys(effect).forEach((key)=>{\n                const effectQualifier = primary[key] || effects[key] || position[key];\n                if (!effectQualifier) return;\n                const { qualifier, prefix, converters } = effectQualifier;\n                const transformation = constructTransformation({\n                    qualifier,\n                    prefix,\n                    value: effect[key],\n                    converters\n                });\n                if (transformation) {\n                    primary2.push(transformation);\n                }\n            });\n        });\n        appliedEffects.forEach((effect)=>{\n            Object.keys(effect).forEach((key)=>{\n                const effectQualifier = primary[key] || effects[key] || position[key];\n                if (!effectQualifier) return;\n                const { qualifier, prefix, converters } = effectQualifier;\n                const transformation = constructTransformation({\n                    qualifier,\n                    prefix,\n                    value: effect[key],\n                    converters\n                });\n                if (transformation) {\n                    applied.push(transformation);\n                }\n            });\n        });\n        layerFlags.forEach((flag)=>{\n            if (!supportedFlags2.includes(flag)) return;\n            primary2.push(`fl_${flag}`);\n        });\n        appliedFlags.forEach((flag)=>{\n            if (!supportedFlags2.includes(flag)) return;\n            applied.push(`fl_${flag}`);\n        });\n        if (hasText) {\n            if (typeof text3 === \"string\") {\n                text3 = {\n                    ...DEFAULT_TEXT_OPTIONS,\n                    text: text3\n                };\n            }\n            const textTransformations = [];\n            if (typeof text3 === \"object\") {\n                const textOptions = Object.keys(text3).filter((key)=>(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_0__.objectHasKey)(text, key)).map((key)=>{\n                    const value = text3 && (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_0__.objectHasKey)(text3, key) && text3[key];\n                    return {\n                        ...text[key],\n                        key,\n                        value,\n                        order: text[key].order || 99\n                    };\n                });\n                const sortedTextOptions = (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_0__.sortByKey)(textOptions, \"order\");\n                for (const textOption of sortedTextOptions){\n                    const { key, value, qualifier, location, converters } = textOption;\n                    let textValue = value;\n                    converters == null ? void 0 : converters.forEach(({ test, convert })=>{\n                        if (!test(value)) return;\n                        textValue = convert(value);\n                    });\n                    if (location === \"primary\") {\n                        primary2.push(`${qualifier}_${textValue}`);\n                    } else if (qualifier === \"self\") {\n                        textTransformations.push(key);\n                    } else if (qualifier) {\n                        textTransformations.push(`${qualifier}_${textValue}`);\n                    } else {\n                        textTransformations.push(textValue);\n                    }\n                }\n            }\n            const specialCharacters = {\n                \".\": \"%2E\",\n                \",\": \"%2C\",\n                \"/\": \"%2F\"\n            };\n            let layerText = (text3 == null ? void 0 : text3.text) || \"\";\n            if (typeof layerText === \"string\") {\n                (_a = Object.keys(specialCharacters)) == null ? void 0 : _a.forEach((character)=>{\n                    layerText = layerText == null ? void 0 : layerText.replace(character, specialCharacters[character]);\n                });\n            }\n            layerTransformation = `${layerTransformation}:${textTransformations.join(\"_\")}:${layerText}`;\n        }\n        if (hasPosition) {\n            Object.keys(position2).forEach((key)=>{\n                if (!(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_0__.objectHasKey)(position, key)) return;\n                const { qualifier, converters } = position[key];\n                const transformation = constructTransformation({\n                    qualifier,\n                    value: position2[key],\n                    converters\n                });\n                if (transformation) {\n                    applied.push(transformation);\n                }\n            });\n        }\n        if (primary2.length > 0) {\n            layerTransformation = `${layerTransformation},${primary2.join(\",\")}`;\n        }\n        layerTransformation = `${layerTransformation}/fl_layer_apply,fl_no_overflow`;\n        if (applied.length > 0) {\n            layerTransformation = `${layerTransformation},${applied.join(\",\")}`;\n        }\n        cldAsset.addTransformation(layerTransformation);\n    }\n    return {};\n}\n// src/plugins/raw-transformations.ts\nvar raw_transformations_exports = {};\n__export(raw_transformations_exports, {\n    assetTypes: ()=>assetTypes9,\n    plugin: ()=>plugin9,\n    props: ()=>props9\n});\nvar props9 = [\n    \"rawTransformations\"\n];\nvar assetTypes9 = [\n    \"image\",\n    \"images\",\n    \"video\",\n    \"videos\"\n];\nfunction plugin9(props20) {\n    const { cldAsset, options } = props20;\n    const { rawTransformations = [] } = options;\n    rawTransformations.forEach((transformation)=>{\n        cldAsset.addTransformation(transformation);\n    });\n    return {};\n}\n// src/plugins/recolor.ts\nvar recolor_exports = {};\n__export(recolor_exports, {\n    assetTypes: ()=>assetTypes10,\n    plugin: ()=>plugin10,\n    props: ()=>props10\n});\nvar props10 = [\n    \"recolor\"\n];\nvar assetTypes10 = [\n    \"image\",\n    \"images\"\n];\nfunction plugin10(props20) {\n    const { cldAsset, options } = props20;\n    const { recolor } = options;\n    const recolorOptions = {\n        prompt: void 0,\n        \"to-color\": void 0,\n        multiple: void 0\n    };\n    if (Array.isArray(recolor)) {\n        if (Array.isArray(recolor[0])) {\n            recolorOptions.prompt = promptArrayToString(recolor[0]);\n        } else {\n            recolorOptions.prompt = recolor[0];\n        }\n        if (typeof recolor[1] === \"string\") {\n            recolorOptions[\"to-color\"] = recolor[1];\n        }\n    } else if (typeof recolor === \"object\") {\n        if (typeof recolor.prompt === \"string\") {\n            recolorOptions.prompt = recolor.prompt;\n        } else if (Array.isArray(recolor.prompt)) {\n            recolorOptions.prompt = promptArrayToString(recolor.prompt);\n        }\n        if (typeof recolor.to === \"string\") {\n            recolorOptions[\"to-color\"] = recolor.to;\n        }\n        if (recolor.multiple === true) {\n            recolorOptions.multiple = `true`;\n        }\n    }\n    const transformation = Object.entries(recolorOptions).filter(([, value])=>!!value).map(([key, value])=>`${key}_${value}`).join(\";\");\n    if (transformation) {\n        cldAsset.addTransformation(`e_gen_recolor:${transformation}`);\n    }\n    return {};\n}\n// src/plugins/remove.ts\nvar remove_exports = {};\n__export(remove_exports, {\n    assetTypes: ()=>assetTypes11,\n    plugin: ()=>plugin11,\n    props: ()=>props11\n});\nvar props11 = [\n    \"remove\"\n];\nvar assetTypes11 = [\n    \"image\",\n    \"images\"\n];\nfunction plugin11(props20) {\n    const { cldAsset, options } = props20;\n    const { remove } = options;\n    const removeOptions = {\n        prompt: void 0,\n        region: void 0,\n        multiple: void 0,\n        \"remove-shadow\": void 0\n    };\n    if (typeof remove === \"string\") {\n        removeOptions.prompt = remove;\n    } else if (Array.isArray(remove)) {\n        removeOptions.prompt = promptArrayToString(remove);\n    } else if (typeof remove === \"object\") {\n        const hasPrompt = typeof remove.prompt === \"string\" || Array.isArray(remove.prompt);\n        const hasRegion = Array.isArray(remove.region);\n        if (hasPrompt && hasRegion) {\n            throw new Error(\"Invalid remove options: you can not have both a prompt and a region. More info: https://cloudinary.com/documentation/transformation_reference#e_gen_remove\");\n        }\n        if (typeof remove.prompt === \"string\") {\n            removeOptions.prompt = remove.prompt;\n        } else if (Array.isArray(remove.prompt)) {\n            removeOptions.prompt = promptArrayToString(remove.prompt);\n        }\n        if (Array.isArray(remove.region)) {\n            removeOptions.region = regionArrayToString(remove.region);\n        }\n        if (remove.multiple === true) {\n            removeOptions.multiple = `true`;\n        }\n        if (remove.removeShadow === true) {\n            removeOptions[\"remove-shadow\"] = `true`;\n        }\n    }\n    const transformation = Object.entries(removeOptions).filter(([, value])=>!!value).map(([key, value])=>`${key}_${value}`).join(\";\");\n    if (transformation) {\n        cldAsset.addTransformation(`e_gen_remove:${transformation}`);\n    }\n    return {};\n}\nfunction regionArrayToString(regionArray) {\n    const indexes = {\n        0: \"x\",\n        1: \"y\",\n        2: \"w\",\n        3: \"h\"\n    };\n    const regionString = regionArray.map((region, index)=>{\n        if (Array.isArray(region)) {\n            return regionArrayToString(region);\n        }\n        const key = indexes[index];\n        return `${key}_${region}`;\n    }).join(\";\");\n    return `(${regionString})`;\n}\n// src/plugins/remove-background.ts\nvar remove_background_exports = {};\n__export(remove_background_exports, {\n    assetTypes: ()=>assetTypes12,\n    plugin: ()=>plugin12,\n    props: ()=>props12\n});\nvar props12 = [\n    \"removeBackground\"\n];\nvar assetTypes12 = [\n    \"image\",\n    \"images\"\n];\nfunction plugin12(props20) {\n    const { cldAsset, options } = props20;\n    const { removeBackground = false } = options;\n    if (removeBackground) {\n        cldAsset.effect(\"e_background_removal\");\n    }\n    return {};\n}\n// src/plugins/restore.ts\nvar restore_exports = {};\n__export(restore_exports, {\n    assetTypes: ()=>assetTypes13,\n    plugin: ()=>plugin13,\n    props: ()=>props13\n});\nvar props13 = [\n    \"restore\"\n];\nvar assetTypes13 = [\n    \"image\",\n    \"images\"\n];\nfunction plugin13(props20) {\n    const { cldAsset, options } = props20;\n    const { restore = false } = options;\n    if (restore) {\n        cldAsset.effect(\"e_gen_restore\");\n    }\n    return {};\n}\n// src/plugins/sanitize.ts\nvar sanitize_exports = {};\n__export(sanitize_exports, {\n    assetTypes: ()=>assetTypes14,\n    plugin: ()=>plugin14,\n    props: ()=>props14\n});\nvar props14 = [\n    \"sanitize\"\n];\nvar assetTypes14 = [\n    \"image\",\n    \"images\"\n];\nfunction plugin14(props20) {\n    const { cldAsset, options } = props20;\n    const { sanitize = true } = options;\n    const shouldApplySanitizer = sanitize && (options.format === \"svg\" || cldAsset.publicID.endsWith(\".svg\"));\n    if (shouldApplySanitizer) {\n        cldAsset.effect(\"fl_sanitize\");\n    }\n    return {};\n}\n// src/plugins/seo.ts\nvar seo_exports = {};\n__export(seo_exports, {\n    assetTypes: ()=>assetTypes15,\n    plugin: ()=>plugin15,\n    props: ()=>props15\n});\nvar props15 = [\n    \"seoSuffix\"\n];\nvar assetTypes15 = [\n    \"image\",\n    \"images\",\n    \"video\",\n    \"videos\"\n];\nfunction plugin15(props20) {\n    const { cldAsset, options } = props20;\n    const { seoSuffix } = options;\n    if (typeof seoSuffix === \"string\") {\n        if (options.deliveryType === \"fetch\") {\n            console.warn(\"SEO suffix is not supported with a delivery type of fetch\");\n        } else {\n            cldAsset.setSuffix(seoSuffix);\n        }\n    }\n    return {};\n}\n// src/plugins/underlays.ts\nvar underlays_exports = {};\n__export(underlays_exports, {\n    assetTypes: ()=>assetTypes16,\n    plugin: ()=>plugin16,\n    props: ()=>props16\n});\n\nvar props16 = [\n    \"underlay\",\n    \"underlays\"\n];\nvar assetTypes16 = [\n    \"image\",\n    \"images\",\n    \"video\",\n    \"videos\"\n];\nfunction plugin16(props20) {\n    const { cldAsset, options } = props20;\n    const { underlay, underlays = [] } = options;\n    const typeQualifier = \"u\";\n    if (Array.isArray(underlays)) {\n        underlays.forEach(applyUnderlay);\n    }\n    if (typeof underlay === \"string\") {\n        const underlayOptions = {\n            publicId: underlay,\n            crop: \"fill\",\n            width: \"1.0\",\n            height: \"1.0\",\n            flags: [\n                \"relative\"\n            ]\n        };\n        applyUnderlay(underlayOptions);\n    }\n    function applyUnderlay({ publicId, type, position: position2, effects: layerEffects = [], flags: flags2 = [], ...options2 }) {\n        const hasPublicId = typeof publicId === \"string\";\n        const hasPosition = typeof position2 === \"object\";\n        if (!hasPublicId) {\n            console.warn(`An ${type} is missing a Public ID`);\n            return;\n        }\n        let layerTransformation = `${typeQualifier}_${publicId.replace(/\\//g, \":\")}`;\n        const primary2 = [];\n        const applied = [];\n        Object.keys(options2).forEach((key)=>{\n            if (!(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_0__.objectHasKey)(primary, key)) return;\n            const { qualifier } = primary[key];\n            primary2.push(`${qualifier}_${options2[key]}`);\n        });\n        layerEffects.forEach((effect)=>{\n            Object.keys(effect).forEach((key)=>{\n                if (!(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_0__.objectHasKey)(primary, key)) return;\n                const { qualifier } = primary[key];\n                primary2.push(`${qualifier}_${effect[key]}`);\n            });\n        });\n        if (hasPosition) {\n            Object.keys(position2).forEach((key)=>{\n                if (!(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_0__.objectHasKey)(position, key)) return;\n                const { qualifier } = position[key];\n                applied.push(`${qualifier}_${position2[key]}`);\n            });\n        }\n        flags2.forEach((key)=>{\n            if (!(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_0__.objectHasKey)(flags, key)) return;\n            const { qualifier, prefix } = flags[key];\n            primary2.push(`${prefix}_${qualifier}`);\n        });\n        layerTransformation = `${layerTransformation},${primary2.join(\",\")}`;\n        layerTransformation = `${layerTransformation}/fl_layer_apply,fl_no_overflow`;\n        if (applied.length > 0) {\n            layerTransformation = `${layerTransformation},${applied.join(\",\")}`;\n        }\n        cldAsset.addTransformation(layerTransformation);\n    }\n    return {};\n}\n// src/plugins/version.ts\nvar version_exports = {};\n__export(version_exports, {\n    assetTypes: ()=>assetTypes17,\n    plugin: ()=>plugin17,\n    props: ()=>props17\n});\nvar props17 = [\n    \"version\"\n];\nvar assetTypes17 = [\n    \"image\",\n    \"images\",\n    \"video\",\n    \"videos\"\n];\nfunction plugin17(props20) {\n    const { cldAsset, options } = props20;\n    const { version } = options;\n    if (typeof version === \"string\" || typeof version === \"number\") {\n        cldAsset.setVersion(`${version}`.replace(\"v\", \"\"));\n    }\n    return {};\n}\n// src/plugins/video.ts\nvar video_exports = {};\n__export(video_exports, {\n    assetTypes: ()=>assetTypes18,\n    plugin: ()=>plugin18,\n    props: ()=>props18\n});\n\nvar props18 = [\n    ...Object.keys(video)\n];\nvar assetTypes18 = [\n    \"video\",\n    \"videos\"\n];\nfunction plugin18(props20) {\n    const { cldAsset, options } = props20;\n    Object.keys(options).forEach((key)=>{\n        if (!(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_0__.objectHasKey)(video, key)) return;\n        const { prefix, qualifier, converters } = video[key];\n        const transformation = constructTransformation({\n            prefix,\n            qualifier,\n            value: options[key],\n            converters\n        });\n        cldAsset.addTransformation(transformation);\n    });\n    return {};\n}\n// src/plugins/zoompan.ts\nvar zoompan_exports = {};\n__export(zoompan_exports, {\n    assetTypes: ()=>assetTypes19,\n    plugin: ()=>plugin19,\n    props: ()=>props19\n});\nvar props19 = [\n    \"zoompan\"\n];\nvar assetTypes19 = [\n    \"image\",\n    \"images\"\n];\nfunction plugin19(props20) {\n    const { cldAsset, options } = props20;\n    const { zoompan = false } = options;\n    const overrides = {\n        format: void 0\n    };\n    if (zoompan === true) {\n        cldAsset.effect(\"e_zoompan\");\n    } else if (typeof zoompan === \"string\") {\n        if (zoompan === \"loop\") {\n            cldAsset.effect(\"e_zoompan\");\n            cldAsset.effect(\"e_loop\");\n        } else {\n            cldAsset.effect(`e_zoompan:${zoompan}`);\n        }\n    } else if (typeof zoompan === \"object\") {\n        let zoompanEffect = \"e_zoompan\";\n        if (typeof zoompan.options === \"string\") {\n            zoompanEffect = `${zoompanEffect}${zoompan.options}`;\n        }\n        cldAsset.effect(zoompanEffect);\n        let loopEffect;\n        if (zoompan.loop === true) {\n            loopEffect = \"e_loop\";\n        } else if (typeof zoompan.loop === \"string\") {\n            loopEffect = `e_loop${zoompan.loop}`;\n        }\n        if (loopEffect) {\n            cldAsset.effect(loopEffect);\n        }\n    }\n    if (zoompan !== false) {\n        overrides.format = \"gif\";\n    }\n    return {\n        options: overrides\n    };\n}\n// src/lib/cloudinary.ts\nvar transformationPlugins = [\n    generative_replace_exports,\n    recolor_exports,\n    remove_exports,\n    remove_background_exports,\n    restore_exports,\n    raw_transformations_exports,\n    cropping_exports,\n    default_image_exports,\n    effects_exports,\n    fill_background_exports,\n    flags_exports,\n    overlays_exports,\n    sanitize_exports,\n    named_transformations_exports,\n    seo_exports,\n    underlays_exports,\n    version_exports,\n    video_exports,\n    zoompan_exports\n];\nfunction constructCloudinaryUrl({ options, config = {}, analytics }) {\n    if (analytics === false) {\n        if (typeof (config == null ? void 0 : config.url) === \"undefined\") {\n            config.url = {};\n        }\n        config.url.analytics = false;\n    }\n    const cld = new _cloudinary_url_gen__WEBPACK_IMPORTED_MODULE_1__.Cloudinary(config);\n    if (typeof (options == null ? void 0 : options.src) !== \"string\") {\n        throw Error(`Failed to construct Cloudinary URL: Missing source (src) in options`);\n    }\n    if (!(options == null ? void 0 : options.assetType)) {\n        options.assetType = \"image\";\n    }\n    const propsCheck = [];\n    transformationPlugins.forEach(({ props: props20 = [] })=>{\n        props20.forEach((prop)=>{\n            if (propsCheck.includes(prop)) {\n                throw new Error(`Option ${prop} already exists!`);\n            }\n            propsCheck.push(prop);\n        });\n    });\n    const parsedOptions = {};\n    let publicId;\n    if (typeof options.src === \"string\" && /^https?:\\/\\//.test(options.src)) {\n        try {\n            const parts = (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_0__.parseUrl)(options.src);\n            publicId = parts == null ? void 0 : parts.publicId;\n            parsedOptions.seoSuffix = parts == null ? void 0 : parts.seoSuffix;\n            parsedOptions.version = parts == null ? void 0 : parts.version;\n        } catch (e) {}\n    }\n    if (!publicId) {\n        publicId = options.src;\n    }\n    Object.keys(parsedOptions).forEach((key)=>{\n        if ((0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_0__.objectHasKey)(options, key)) return;\n        options[key] = parsedOptions[key];\n    });\n    let cldAsset = void 0;\n    if ([\n        \"image\",\n        \"images\"\n    ].includes(options.assetType)) {\n        cldAsset = cld.image(publicId);\n    } else if ([\n        \"video\",\n        \"videos\"\n    ].includes(options.assetType)) {\n        cldAsset = cld.video(publicId);\n    }\n    if (typeof cldAsset === \"undefined\") {\n        throw new Error(\"Invalid asset type.\");\n    }\n    transformationPlugins.forEach(({ plugin: plugin20, assetTypes: assetTypes20, props: props20, strict: strict2 })=>{\n        const supportedAssetType = typeof (options == null ? void 0 : options.assetType) !== \"undefined\" && assetTypes20.includes(options == null ? void 0 : options.assetType);\n        const optionsKeys = Object.keys(options);\n        const attemptedUse = props20.map((prop)=>optionsKeys.includes(prop)).filter((isUsed)=>!!isUsed).length > 0;\n        if (!supportedAssetType) {\n            if (attemptedUse) {\n                console.warn(`One of the following props [${props20.join(\", \")}] was used with an unsupported asset type [${options == null ? void 0 : options.assetType}]`);\n            }\n            return;\n        }\n        if (options.strictTransformations && !strict2) {\n            if (attemptedUse) {\n                console.warn(`One of the following props [${props20.join(\", \")}] was used that is not supported with Strict Transformations.`);\n            }\n            return;\n        }\n        const results = plugin20({\n            cldAsset,\n            options\n        });\n        const { options: pluginOptions } = results || {\n            options: void 0\n        };\n        if ((pluginOptions == null ? void 0 : pluginOptions.format) && options) {\n            options.format = pluginOptions.format;\n        }\n        if ((pluginOptions == null ? void 0 : pluginOptions.width) && options) {\n            options.resize = {\n                width: pluginOptions == null ? void 0 : pluginOptions.width\n            };\n        }\n    });\n    if ((options == null ? void 0 : options.resize) && !options.strictTransformations) {\n        const { width, crop = \"limit\" } = options.resize;\n        cldAsset.effect(`c_${crop},w_${width}`);\n    }\n    cldAsset.setDeliveryType((options == null ? void 0 : options.deliveryType) || \"upload\");\n    if (!options.strictTransformations) {\n        if (options == null ? void 0 : options.dpr) {\n            let dpr = options.dpr;\n            if (typeof dpr === \"number\") {\n                dpr = dpr.toFixed(1);\n            }\n            cldAsset.addTransformation(`dpr_${dpr}`);\n        }\n        if ((options == null ? void 0 : options.format) !== \"default\") {\n            cldAsset.format((options == null ? void 0 : options.format) || \"auto\");\n        }\n        if ((options == null ? void 0 : options.quality) !== \"default\") {\n            cldAsset.quality((options == null ? void 0 : options.quality) || \"auto\");\n        }\n    }\n    return cldAsset.toURL({\n        trackedAnalytics: analytics\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNsb3VkaW5hcnktdXRpbC91cmwtbG9hZGVyL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxXQUFXLENBQUNDLFFBQVFDO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZkwsVUFBVUksUUFBUUUsTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRUUsWUFBWTtJQUFLO0FBQy9EO0FBRUEsd0JBQXdCO0FBQ3lCO0FBQytCO0FBRWhGLDBCQUEwQjtBQUMxQixJQUFJSyxtQkFBbUIsQ0FBQztBQUN4QlYsU0FBU1Usa0JBQWtCO0lBQ3pCQyxZQUFZLElBQU1BO0lBQ2xCQywwQkFBMEIsSUFBTUE7SUFDaENDLFFBQVEsSUFBTUE7SUFDZEMsT0FBTyxJQUFNQTtBQUNmO0FBQ0EsSUFBSUMsbUJBQW1CO0lBQUM7SUFBUTtJQUFRO0lBQVM7SUFBWTtDQUFRO0FBQ3JFLElBQUlDLG1CQUFtQjtJQUFDO0lBQVE7SUFBUTtJQUFTO0lBQVk7Q0FBUTtBQUNyRSxJQUFJQyxnQkFBZ0I7SUFBQztJQUFRO0NBQVE7QUFDckMsSUFBSUgsUUFBUTtJQUNWO0lBQ0E7SUFDQTtJQUNBO0NBQ0Q7QUFDRCxJQUFJSCxhQUFhO0lBQUM7SUFBUztJQUFVO0lBQVM7Q0FBUztBQUN2RCxTQUFTQyx5QkFBeUJNLEtBQUs7SUFDckMsSUFBSSxPQUFPQSxVQUFVLFVBQ25CLE9BQU9BO0lBQ1QsT0FBT0MsU0FBU0Q7QUFDbEI7QUFDQSxTQUFTTCxPQUFPTyxPQUFPO0lBQ3JCLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxPQUFPLEVBQUUsR0FBR0Y7SUFDOUIsTUFBTSxFQUNKRyxXQUFXLEVBQ1hDLE9BQU9DLFlBQVksRUFDbkJDLFFBQVFDLGFBQWEsRUFDckJDLGFBQWFDLGtCQUFrQixFQUMvQkMsT0FBTyxPQUFPLEVBQ2YsR0FBR1I7SUFDSixNQUFNUyxZ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UUFBUTRWLHFCQUFxQixFQUFFO1FBQ2pGLE1BQU0sRUFBRTFWLEtBQUssRUFBRU0sT0FBTyxPQUFPLEVBQUUsR0FBR1IsUUFBUStWLE1BQU07UUFDaERoVyxTQUFTb0IsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFWCxLQUFLLEdBQUcsRUFBRU4sTUFBTSxDQUFDO0lBQ3hDO0lBQ0FILFNBQVNpVyxlQUFlLENBQUMsQ0FBQ2hXLFdBQVcsT0FBTyxLQUFLLElBQUlBLFFBQVEwUyxZQUFZLEtBQUs7SUFDOUUsSUFBSSxDQUFDMVMsUUFBUTRWLHFCQUFxQixFQUFFO1FBQ2xDLElBQUk1VixXQUFXLE9BQU8sS0FBSyxJQUFJQSxRQUFRaVcsR0FBRyxFQUFFO1lBQzFDLElBQUlBLE1BQU1qVyxRQUFRaVcsR0FBRztZQUNyQixJQUFJLE9BQU9BLFFBQVEsVUFBVTtnQkFDM0JBLE1BQU1BLElBQUlDLE9BQU8sQ0FBQztZQUNwQjtZQUNBblcsU0FBUzZCLGlCQUFpQixDQUFDLENBQUMsSUFBSSxFQUFFcVUsSUFBSSxDQUFDO1FBQ3pDO1FBQ0EsSUFBSSxDQUFDalcsV0FBVyxPQUFPLEtBQUssSUFBSUEsUUFBUWtTLE1BQU0sTUFBTSxXQUFXO1lBQzdEblMsU0FBU21TLE1BQU0sQ0FBQyxDQUFDbFMsV0FBVyxPQUFPLEtBQUssSUFBSUEsUUFBUWtTLE1BQU0sS0FBSztRQUNqRTtRQUNBLElBQUksQ0FBQ2xTLFdBQVcsT0FBTyxLQUFLLElBQUlBLFFBQVFtVyxPQUFPLE1BQU0sV0FBVztZQUM5RHBXLFNBQVNvVyxPQUFPLENBQUMsQ0FBQ25XLFdBQVcsT0FBTyxLQUFLLElBQUlBLFFBQVFtVyxPQUFPLEtBQUs7UUFDbkU7SUFDRjtJQUNBLE9BQU9wVyxTQUFTcVcsS0FBSyxDQUFDO1FBQ3BCQyxrQkFBa0IxQjtJQUNwQjtBQUNGO0FBUUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWxvY2hhdC8uL25vZGVfbW9kdWxlcy9AY2xvdWRpbmFyeS11dGlsL3VybC1sb2FkZXIvZGlzdC9pbmRleC5tanM/ODI1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xuXG4vLyBzcmMvbGliL2Nsb3VkaW5hcnkudHNcbmltcG9ydCB7IENsb3VkaW5hcnkgfSBmcm9tIFwiQGNsb3VkaW5hcnkvdXJsLWdlblwiO1xuaW1wb3J0IHsgcGFyc2VVcmwsIG9iamVjdEhhc0tleSBhcyBvYmplY3RIYXNLZXk0IH0gZnJvbSBcIkBjbG91ZGluYXJ5LXV0aWwvdXRpbFwiO1xuXG4vLyBzcmMvcGx1Z2lucy9jcm9wcGluZy50c1xudmFyIGNyb3BwaW5nX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGNyb3BwaW5nX2V4cG9ydHMsIHtcbiAgYXNzZXRUeXBlczogKCkgPT4gYXNzZXRUeXBlcyxcbiAgbm9ybWFsaXplTnVtYmVyUGFyYW1ldGVyOiAoKSA9PiBub3JtYWxpemVOdW1iZXJQYXJhbWV0ZXIsXG4gIHBsdWdpbjogKCkgPT4gcGx1Z2luLFxuICBwcm9wczogKCkgPT4gcHJvcHNcbn0pO1xudmFyIGNyb3BzQXNwZWN0UmF0aW8gPSBbXCJjcm9wXCIsIFwiZmlsbFwiLCBcImxmaWxsXCIsIFwiZmlsbF9wYWRcIiwgXCJ0aHVtYlwiXTtcbnZhciBjcm9wc0dyYXZpdHlBdXRvID0gW1wiY3JvcFwiLCBcImZpbGxcIiwgXCJsZmlsbFwiLCBcImZpbGxfcGFkXCIsIFwidGh1bWJcIl07XG52YXIgY3JvcHNXaXRoWm9vbSA9IFtcImNyb3BcIiwgXCJ0aHVtYlwiXTtcbnZhciBwcm9wcyA9IFtcbiAgXCJhc3BlY3RSYXRpb1wiLFxuICBcImNyb3BcIixcbiAgXCJncmF2aXR5XCIsXG4gIFwiem9vbVwiXG5dO1xudmFyIGFzc2V0VHlwZXMgPSBbXCJpbWFnZVwiLCBcImltYWdlc1wiLCBcInZpZGVvXCIsIFwidmlkZW9zXCJdO1xuZnVuY3Rpb24gbm9ybWFsaXplTnVtYmVyUGFyYW1ldGVyKHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gIT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIHBhcmFtO1xuICByZXR1cm4gcGFyc2VJbnQocGFyYW0pO1xufVxuZnVuY3Rpb24gcGx1Z2luKHByb3BzMjApIHtcbiAgY29uc3QgeyBjbGRBc3NldCwgb3B0aW9ucyB9ID0gcHJvcHMyMDtcbiAgY29uc3Qge1xuICAgIGFzcGVjdFJhdGlvLFxuICAgIHdpZHRoOiBkZWZhdWx0V2lkdGgsXG4gICAgaGVpZ2h0OiBkZWZhdWx0SGVpZ2h0LFxuICAgIHdpZHRoUmVzaXplOiBkZWZhdWx0V2lkdGhSZXNpemUsXG4gICAgY3JvcCA9IFwibGltaXRcIlxuICB9ID0gb3B0aW9ucztcbiAgY29uc3Qgb3ZlcnJpZGVzID0ge1xuICAgIHdpZHRoOiB2b2lkIDBcbiAgfTtcbiAgbGV0IGhlaWdodCA9IG5vcm1hbGl6ZU51bWJlclBhcmFtZXRlcihkZWZhdWx0SGVpZ2h0KTtcbiAgbGV0IHdpZHRoID0gbm9ybWFsaXplTnVtYmVyUGFyYW1ldGVyKGRlZmF1bHRXaWR0aCk7XG4gIGxldCB3aWR0aFJlc2l6ZSA9IG5vcm1hbGl6ZU51bWJlclBhcmFtZXRlcihkZWZhdWx0V2lkdGhSZXNpemUpO1xuICBjb25zdCBoYXNEZWZpbmVkRGltZW5zaW9ucyA9IGhlaWdodCB8fCB3aWR0aDtcbiAgY29uc3QgaGFzVmFsaWRBc3BlY3RSYXRpbyA9IGFzcGVjdFJhdGlvICYmIGNyb3BzQXNwZWN0UmF0aW8uaW5jbHVkZXMoY3JvcCk7XG4gIGxldCB0cmFuc2Zvcm1hdGlvblN0cmluZyA9IFwiXCI7XG4gIGlmIChjcm9wICYmIChoYXNEZWZpbmVkRGltZW5zaW9ucyB8fCBoYXNWYWxpZEFzcGVjdFJhdGlvKSkge1xuICAgIHRyYW5zZm9ybWF0aW9uU3RyaW5nID0gYGNfJHtjcm9wfWA7XG4gIH1cbiAgaWYgKGhhc1ZhbGlkQXNwZWN0UmF0aW8pIHtcbiAgICB0cmFuc2Zvcm1hdGlvblN0cmluZyA9IGAke3RyYW5zZm9ybWF0aW9uU3RyaW5nfSxhcl8ke2FzcGVjdFJhdGlvfWA7XG4gIH1cbiAgaWYgKHdpZHRoKSB7XG4gICAgdHJhbnNmb3JtYXRpb25TdHJpbmcgPSBgJHt0cmFuc2Zvcm1hdGlvblN0cmluZ30sd18ke3dpZHRofWA7XG4gIH1cbiAgaWYgKCFvcHRpb25zLmdyYXZpdHkgJiYgY3JvcHNHcmF2aXR5QXV0by5pbmNsdWRlcyhjcm9wKSkge1xuICAgIG9wdGlvbnMuZ3Jhdml0eSA9IFwiYXV0b1wiO1xuICB9XG4gIGlmICghW1wibGltaXRcIl0uaW5jbHVkZXMoY3JvcCkgJiYgdHlwZW9mIGhlaWdodCA9PT0gXCJudW1iZXJcIikge1xuICAgIHRyYW5zZm9ybWF0aW9uU3RyaW5nID0gYCR7dHJhbnNmb3JtYXRpb25TdHJpbmd9LGhfJHtoZWlnaHR9YDtcbiAgfVxuICBpZiAob3B0aW9ucy5ncmF2aXR5KSB7XG4gICAgaWYgKG9wdGlvbnMuZ3Jhdml0eSA9PT0gXCJhdXRvXCIgJiYgIWNyb3BzR3Jhdml0eUF1dG8uaW5jbHVkZXMoY3JvcCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihgQXV0byBncmF2aXR5IGNhbiBvbmx5IGJlIHVzZWQgd2l0aCBjcm9wIG1vZGVzOiAke2Nyb3BzR3Jhdml0eUF1dG8uam9pbihcIiwgXCIpfS4gTm90IGFwcGx5aW5nIGdyYXZpdHkuYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zZm9ybWF0aW9uU3RyaW5nID0gYCR7dHJhbnNmb3JtYXRpb25TdHJpbmd9LGdfJHtvcHRpb25zLmdyYXZpdHl9YDtcbiAgICB9XG4gIH1cbiAgaWYgKG9wdGlvbnMuem9vbSkge1xuICAgIGlmIChvcHRpb25zLnpvb20gPT09IFwiYXV0b1wiICYmICFjcm9wc1dpdGhab29tLmluY2x1ZGVzKGNyb3ApKSB7XG4gICAgICBjb25zb2xlLndhcm4oYFpvb20gY2FuIG9ubHkgYmUgdXNlZCB3aXRoIGNyb3AgbW9kZXM6ICR7Y3JvcHNXaXRoWm9vbS5qb2luKFwiLCBcIil9LiBOb3QgYXBwbHlpbmcgem9vbS5gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNmb3JtYXRpb25TdHJpbmcgPSBgJHt0cmFuc2Zvcm1hdGlvblN0cmluZ30sel8ke29wdGlvbnMuem9vbX1gO1xuICAgIH1cbiAgfVxuICBjbGRBc3NldC5lZmZlY3QodHJhbnNmb3JtYXRpb25TdHJpbmcpO1xuICBpZiAod2lkdGhSZXNpemUpIHtcbiAgICBvdmVycmlkZXMud2lkdGggPSB3aWR0aFJlc2l6ZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG9wdGlvbnM6IG92ZXJyaWRlc1xuICB9O1xufVxuXG4vLyBzcmMvcGx1Z2lucy9kZWZhdWx0LWltYWdlLnRzXG52YXIgZGVmYXVsdF9pbWFnZV9leHBvcnRzID0ge307XG5fX2V4cG9ydChkZWZhdWx0X2ltYWdlX2V4cG9ydHMsIHtcbiAgYXNzZXRUeXBlczogKCkgPT4gYXNzZXRUeXBlczIsXG4gIHBsdWdpbjogKCkgPT4gcGx1Z2luMixcbiAgcHJvcHM6ICgpID0+IHByb3BzMlxufSk7XG5pbXBvcnQgeyBnZXRGb3JtYXQgfSBmcm9tIFwiQGNsb3VkaW5hcnktdXRpbC91dGlsXCI7XG52YXIgcHJvcHMyID0gW1wiZGVmYXVsdFwiXTtcbnZhciBhc3NldFR5cGVzMiA9IFtcImltYWdlXCIsIFwiaW1hZ2VzXCJdO1xuZnVuY3Rpb24gcGx1Z2luMihwcm9wczIwKSB7XG4gIGNvbnN0IHsgY2xkQXNzZXQsIG9wdGlvbnMgfSA9IHByb3BzMjA7XG4gIGNvbnN0IHsgZGVmYXVsdEltYWdlIH0gPSBvcHRpb25zO1xuICBpZiAodHlwZW9mIGRlZmF1bHRJbWFnZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIGlmICghZ2V0Rm9ybWF0KGRlZmF1bHRJbWFnZSkpIHtcbiAgICAgIGNvbnNvbGUud2FybihgVGhlIGRlZmF1bHRJbWFnZSBwcm9wIG1heSBiZSBtaXNzaW5nIGEgZm9ybWF0IGFuZCBtdXN0IGluY2x1ZGUgaXQgYWxvbmcgd2l0aCB0aGUgcHVibGljIElELiAoRXg6IG15aW1hZ2UuanBnKWApO1xuICAgIH1cbiAgICBjb25zdCBkZWZhdWx0SW1hZ2VJZCA9IGRlZmF1bHRJbWFnZS5yZXBsYWNlKC9cXC8vZywgXCI6XCIpO1xuICAgIGNsZEFzc2V0LmFkZFRyYW5zZm9ybWF0aW9uKGBkXyR7ZGVmYXVsdEltYWdlSWR9YCk7XG4gIH1cbiAgcmV0dXJuIHt9O1xufVxuXG4vLyBzcmMvcGx1Z2lucy9lZmZlY3RzLnRzXG52YXIgZWZmZWN0c19leHBvcnRzID0ge307XG5fX2V4cG9ydChlZmZlY3RzX2V4cG9ydHMsIHtcbiAgYXNzZXRUeXBlczogKCkgPT4gYXNzZXRUeXBlczMsXG4gIHBsdWdpbjogKCkgPT4gcGx1Z2luMyxcbiAgcHJvcHM6ICgpID0+IHByb3BzM1xufSk7XG5cbi8vIHNyYy9jb25zdGFudHMvcXVhbGlmaWVycy50c1xuaW1wb3J0IHsgdGVzdENvbG9ySXNIZXgsIGNvbnZlcnRDb2xvckhleFRvUmdiIH0gZnJvbSBcIkBjbG91ZGluYXJ5LXV0aWwvdXRpbFwiO1xudmFyIGNvbnZlcnRlcnNDb2xvcnMgPSBbXG4gIHtcbiAgICB0ZXN0OiB0ZXN0Q29sb3JJc0hleCxcbiAgICBjb252ZXJ0OiBjb252ZXJ0Q29sb3JIZXhUb1JnYlxuICB9XG5dO1xudmFyIHByaW1hcnkgPSB7XG4gIGFzcGVjdFJhdGlvOiB7XG4gICAgcXVhbGlmaWVyOiBcImFyXCJcbiAgfSxcbiAgY3JvcDoge1xuICAgIHF1YWxpZmllcjogXCJjXCJcbiAgfSxcbiAgZ3Jhdml0eToge1xuICAgIHF1YWxpZmllcjogXCJnXCJcbiAgfSxcbiAgaGVpZ2h0OiB7XG4gICAgcXVhbGlmaWVyOiBcImhcIlxuICB9LFxuICB3aWR0aDoge1xuICAgIHF1YWxpZmllcjogXCJ3XCJcbiAgfVxufTtcbnZhciBwb3NpdGlvbiA9IHtcbiAgYW5nbGU6IHtcbiAgICBxdWFsaWZpZXI6IFwiYVwiXG4gIH0sXG4gIGdyYXZpdHk6IHtcbiAgICBxdWFsaWZpZXI6IFwiZ1wiXG4gIH0sXG4gIHg6IHtcbiAgICBxdWFsaWZpZXI6IFwieFwiXG4gIH0sXG4gIHk6IHtcbiAgICBxdWFsaWZpZXI6IFwieVwiXG4gIH1cbn07XG52YXIgdGV4dCA9IHtcbiAgYWxpZ25tZW50OiB7XG4gICAgcXVhbGlmaWVyOiBmYWxzZSxcbiAgICBvcmRlcjogNlxuICB9LFxuICBhbnRpYWxpYXM6IHtcbiAgICBxdWFsaWZpZXI6IFwiYW50aWFsaWFzXCJcbiAgfSxcbiAgYm9yZGVyOiB7XG4gICAgcXVhbGlmaWVyOiBcImJvXCIsXG4gICAgbG9jYXRpb246IFwicHJpbWFyeVwiXG4gIH0sXG4gIGNvbG9yOiB7XG4gICAgcXVhbGlmaWVyOiBcImNvXCIsXG4gICAgbG9jYXRpb246IFwicHJpbWFyeVwiLFxuICAgIGNvbnZlcnRlcnM6IGNvbnZlcnRlcnNDb2xvcnNcbiAgfSxcbiAgZm9udEZhbWlseToge1xuICAgIHF1YWxpZmllcjogZmFsc2UsXG4gICAgb3JkZXI6IDFcbiAgfSxcbiAgZm9udFNpemU6IHtcbiAgICBxdWFsaWZpZXI6IGZhbHNlLFxuICAgIG9yZGVyOiAyXG4gIH0sXG4gIGZvbnRTdHlsZToge1xuICAgIHF1YWxpZmllcjogZmFsc2UsXG4gICAgb3JkZXI6IDRcbiAgfSxcbiAgZm9udFdlaWdodDoge1xuICAgIHF1YWxpZmllcjogZmFsc2UsXG4gICAgb3JkZXI6IDNcbiAgfSxcbiAgaGludGluZzoge1xuICAgIHF1YWxpZmllcjogXCJoaW50aW5nXCJcbiAgfSxcbiAgbGV0dGVyU3BhY2luZzoge1xuICAgIHF1YWxpZmllcjogXCJsZXR0ZXJfc3BhY2luZ1wiXG4gIH0sXG4gIGxpbmVTcGFjaW5nOiB7XG4gICAgcXVhbGlmaWVyOiBcImxpbmVfc3BhY2luZ1wiXG4gIH0sXG4gIHN0cm9rZToge1xuICAgIHF1YWxpZmllcjogXCJzZWxmXCIsXG4gICAgb3JkZXI6IDdcbiAgfSxcbiAgdGV4dERlY29yYXRpb246IHtcbiAgICBxdWFsaWZpZXI6IGZhbHNlLFxuICAgIG9yZGVyOiA1XG4gIH1cbn07XG52YXIgZWZmZWN0cyA9IHtcbiAgYXJ0OiB7XG4gICAgcHJlZml4OiBcImVcIixcbiAgICBxdWFsaWZpZXI6IFwiYXJ0XCJcbiAgfSxcbiAgYXV0b0JyaWdodG5lc3M6IHtcbiAgICBwcmVmaXg6IFwiZVwiLFxuICAgIHF1YWxpZmllcjogXCJhdXRvX2JyaWdodG5lc3NcIlxuICB9LFxuICBhdXRvQ29sb3I6IHtcbiAgICBwcmVmaXg6IFwiZVwiLFxuICAgIHF1YWxpZmllcjogXCJhdXRvX2NvbG9yXCJcbiAgfSxcbiAgYXV0b0NvbnRyYXN0OiB7XG4gICAgcHJlZml4OiBcImVcIixcbiAgICBxdWFsaWZpZXI6IFwiYXV0b19jb250cmFzdFwiXG4gIH0sXG4gIGFzc2lzdENvbG9yYmxpbmQ6IHtcbiAgICBwcmVmaXg6IFwiZVwiLFxuICAgIHF1YWxpZmllcjogXCJhc3Npc3RfY29sb3JibGluZFwiXG4gIH0sXG4gIGJhY2tncm91bmQ6IHtcbiAgICBxdWFsaWZpZXI6IFwiYlwiXG4gIH0sXG4gIGJsYWNrd2hpdGU6IHtcbiAgICBwcmVmaXg6IFwiZVwiLFxuICAgIHF1YWxpZmllcjogXCJibGFja3doaXRlXCJcbiAgfSxcbiAgYmx1cjoge1xuICAgIHByZWZpeDogXCJlXCIsXG4gICAgcXVhbGlmaWVyOiBcImJsdXJcIlxuICB9LFxuICBibHVyRmFjZXM6IHtcbiAgICBwcmVmaXg6IFwiZVwiLFxuICAgIHF1YWxpZmllcjogXCJibHVyX2ZhY2VzXCJcbiAgfSxcbiAgYmx1clJlZ2lvbjoge1xuICAgIHByZWZpeDogXCJlXCIsXG4gICAgcXVhbGlmaWVyOiBcImJsdXJfcmVnaW9uXCJcbiAgfSxcbiAgYm9yZGVyOiB7XG4gICAgcXVhbGlmaWVyOiBcImJvXCJcbiAgfSxcbiAgYnJpZ2h0bmVzczoge1xuICAgIHByZWZpeDogXCJlXCIsXG4gICAgcXVhbGlmaWVyOiBcImJyaWdodG5lc3NcIlxuICB9LFxuICBicmlnaHRuZXNzSFNCOiB7XG4gICAgcHJlZml4OiBcImVcIixcbiAgICBxdWFsaWZpZXI6IFwiYnJpZ2h0bmVzc19oc2JcIlxuICB9LFxuICBjYXJ0b29uaWZ5OiB7XG4gICAgcHJlZml4OiBcImVcIixcbiAgICBxdWFsaWZpZXI6IFwiY2FydG9vbmlmeVwiXG4gIH0sXG4gIGNvbG9yOiB7XG4gICAgcXVhbGlmaWVyOiBcImNvXCIsXG4gICAgY29udmVydGVyczogY29udmVydGVyc0NvbG9yc1xuICB9LFxuICBjb2xvcml6ZToge1xuICAgIHByZWZpeDogXCJlXCIsXG4gICAgcXVhbGlmaWVyOiBcImNvbG9yaXplXCJcbiAgfSxcbiAgY29udHJhc3Q6IHtcbiAgICBwcmVmaXg6IFwiZVwiLFxuICAgIHF1YWxpZmllcjogXCJjb250cmFzdFwiXG4gIH0sXG4gIGRpc3RvcnQ6IHtcbiAgICBwcmVmaXg6IFwiZVwiLFxuICAgIHF1YWxpZmllcjogXCJkaXN0b3J0XCJcbiAgfSxcbiAgZmlsbExpZ2h0OiB7XG4gICAgcHJlZml4OiBcImVcIixcbiAgICBxdWFsaWZpZXI6IFwiZmlsbF9saWdodFwiXG4gIH0sXG4gIGdhbW1hOiB7XG4gICAgcHJlZml4OiBcImVcIixcbiAgICBxdWFsaWZpZXI6IFwiZ2FtbWFcIlxuICB9LFxuICBncmFkaWVudEZhZGU6IHtcbiAgICBwcmVmaXg6IFwiZVwiLFxuICAgIHF1YWxpZmllcjogXCJncmFkaWVudF9mYWRlXCJcbiAgfSxcbiAgZ3JheXNjYWxlOiB7XG4gICAgcHJlZml4OiBcImVcIixcbiAgICBxdWFsaWZpZXI6IFwiZ3JheXNjYWxlXCJcbiAgfSxcbiAgaW1wcm92ZToge1xuICAgIHByZWZpeDogXCJlXCIsXG4gICAgcXVhbGlmaWVyOiBcImltcHJvdmVcIlxuICB9LFxuICBtdWx0aXBseToge1xuICAgIHByZWZpeDogXCJlXCIsXG4gICAgcXVhbGlmaWVyOiBcIm11bHRpcGx5XCJcbiAgfSxcbiAgbmVnYXRlOiB7XG4gICAgcHJlZml4OiBcImVcIixcbiAgICBxdWFsaWZpZXI6IFwibmVnYXRlXCJcbiAgfSxcbiAgb2lsUGFpbnQ6IHtcbiAgICBwcmVmaXg6IFwiZVwiLFxuICAgIHF1YWxpZmllcjogXCJvaWxfcGFpbnRcIlxuICB9LFxuICBvcGFjaXR5OiB7XG4gICAgcXVhbGlmaWVyOiBcIm9cIlxuICB9LFxuICBvdXRsaW5lOiB7XG4gICAgcHJlZml4OiBcImVcIixcbiAgICBxdWFsaWZpZXI6IFwib3V0bGluZVwiXG4gIH0sXG4gIG92ZXJsYXk6IHtcbiAgICBwcmVmaXg6IFwiZVwiLFxuICAgIHF1YWxpZmllcjogXCJvdmVybGF5XCJcbiAgfSxcbiAgcGl4ZWxhdGU6IHtcbiAgICBwcmVmaXg6IFwiZVwiLFxuICAgIHF1YWxpZmllcjogXCJwaXhlbGF0ZVwiXG4gIH0sXG4gIHBpeGVsYXRlRmFjZXM6IHtcbiAgICBwcmVmaXg6IFwiZVwiLFxuICAgIHF1YWxpZmllcjogXCJwaXhlbGF0ZV9mYWNlc1wiXG4gIH0sXG4gIHBpeGVsYXRlUmVnaW9uOiB7XG4gICAgcHJlZml4OiBcImVcIixcbiAgICBxdWFsaWZpZXI6IFwicGl4ZWxhdGVfcmVnaW9uXCJcbiAgfSxcbiAgcmFkaXVzOiB7XG4gICAgcXVhbGlmaWVyOiBcInJcIlxuICB9LFxuICByZWRleWU6IHtcbiAgICBwcmVmaXg6IFwiZVwiLFxuICAgIHF1YWxpZmllcjogXCJyZWRleWVcIlxuICB9LFxuICByZXBsYWNlQ29sb3I6IHtcbiAgICBwcmVmaXg6IFwiZVwiLFxuICAgIHF1YWxpZmllcjogXCJyZXBsYWNlX2NvbG9yXCJcbiAgfSxcbiAgc2F0dXJhdGlvbjoge1xuICAgIHByZWZpeDogXCJlXCIsXG4gICAgcXVhbGlmaWVyOiBcInNhdHVyYXRpb25cIlxuICB9LFxuICBzY3JlZW46IHtcbiAgICBwcmVmaXg6IFwiZVwiLFxuICAgIHF1YWxpZmllcjogXCJzY3JlZW5cIlxuICB9LFxuICBzZXBpYToge1xuICAgIHByZWZpeDogXCJlXCIsXG4gICAgcXVhbGlmaWVyOiBcInNlcGlhXCJcbiAgfSxcbiAgc2hhZG93OiB7XG4gICAgcHJlZml4OiBcImVcIixcbiAgICBxdWFsaWZpZXI6IFwic2hhZG93XCJcbiAgfSxcbiAgc2hhcnBlbjoge1xuICAgIHByZWZpeDogXCJlXCIsXG4gICAgcXVhbGlmaWVyOiBcInNoYXJwZW5cIlxuICB9LFxuICBzaGVhcjoge1xuICAgIHByZWZpeDogXCJlXCIsXG4gICAgcXVhbGlmaWVyOiBcInNoZWFyXCJcbiAgfSxcbiAgc2ltdWxhdGVDb2xvcmJsaW5kOiB7XG4gICAgcHJlZml4OiBcImVcIixcbiAgICBxdWFsaWZpZXI6IFwic2ltdWxhdGVfY29sb3JibGluZFwiXG4gIH0sXG4gIHRpbnQ6IHtcbiAgICBwcmVmaXg6IFwiZVwiLFxuICAgIHF1YWxpZmllcjogXCJ0aW50XCJcbiAgfSxcbiAgdHJpbToge1xuICAgIHByZWZpeDogXCJlXCIsXG4gICAgcXVhbGlmaWVyOiBcInRyaW1cIlxuICB9LFxuICB1bnNoYXJwTWFzazoge1xuICAgIHByZWZpeDogXCJlXCIsXG4gICAgcXVhbGlmaWVyOiBcInVuc2hhcnBfbWFza1wiXG4gIH0sXG4gIHZlY3Rvcml6ZToge1xuICAgIHByZWZpeDogXCJlXCIsXG4gICAgcXVhbGlmaWVyOiBcInZlY3Rvcml6ZVwiXG4gIH0sXG4gIHZpYnJhbmNlOiB7XG4gICAgcHJlZml4OiBcImVcIixcbiAgICBxdWFsaWZpZXI6IFwidmlicmFuY2VcIlxuICB9LFxuICB2aWduZXR0ZToge1xuICAgIHByZWZpeDogXCJlXCIsXG4gICAgcXVhbGlmaWVyOiBcInZpZ25ldHRlXCJcbiAgfVxufTtcbnZhciBmbGFncyA9IHtcbiAgYW5pbWF0ZWQ6IHtcbiAgICBwcmVmaXg6IFwiZmxcIixcbiAgICBxdWFsaWZpZXI6IFwiYW5pbWF0ZWRcIlxuICB9LFxuICBhbnlGb3JtYXQ6IHtcbiAgICBwcmVmaXg6IFwiZmxcIixcbiAgICBxdWFsaWZpZXI6IFwiYW55X2Zvcm1hdFwiXG4gIH0sXG4gIGFwbmc6IHtcbiAgICBwcmVmaXg6IFwiZmxcIixcbiAgICBxdWFsaWZpZXI6IFwiYXBuZ1wiXG4gIH0sXG4gIGF0dGFjaG1lbnQ6IHtcbiAgICBwcmVmaXg6IFwiZmxcIixcbiAgICBxdWFsaWZpZXI6IFwiYXR0YWNobWVudFwiXG4gIH0sXG4gIGF3ZWJwOiB7XG4gICAgcHJlZml4OiBcImZsXCIsXG4gICAgcXVhbGlmaWVyOiBcImF3ZWJwXCJcbiAgfSxcbiAgY2xpcDoge1xuICAgIHByZWZpeDogXCJmbFwiLFxuICAgIHF1YWxpZmllcjogXCJjbGlwXCJcbiAgfSxcbiAgY2xpcEV2ZW5vZGQ6IHtcbiAgICBwcmVmaXg6IFwiZmxcIixcbiAgICBxdWFsaWZpZXI6IFwiY2xpcF9ldmVub2RkXCJcbiAgfSxcbiAgY3V0dGVyOiB7XG4gICAgcHJlZml4OiBcImZsXCIsXG4gICAgcXVhbGlmaWVyOiBcImN1dHRlclwiXG4gIH0sXG4gIGRyYWNvOiB7XG4gICAgcHJlZml4OiBcImZsXCIsXG4gICAgcXVhbGlmaWVyOiBcImRyYWNvXCJcbiAgfSxcbiAgZm9yY2VJY2M6IHtcbiAgICBwcmVmaXg6IFwiZmxcIixcbiAgICBxdWFsaWZpZXI6IFwiZm9yY2VfaWNjXCJcbiAgfSxcbiAgZm9yY2VTdHJpcDoge1xuICAgIHByZWZpeDogXCJmbFwiLFxuICAgIHF1YWxpZmllcjogXCJmb3JjZV9zdHJpcFwiXG4gIH0sXG4gIGdldGluZm86IHtcbiAgICBwcmVmaXg6IFwiZmxcIixcbiAgICBxdWFsaWZpZXI6IFwiZ2V0aW5mb1wiXG4gIH0sXG4gIGdyb3VwNDoge1xuICAgIHByZWZpeDogXCJmbFwiLFxuICAgIHF1YWxpZmllcjogXCJncm91cDRcIlxuICB9LFxuICBobHN2Mzoge1xuICAgIHByZWZpeDogXCJmbFwiLFxuICAgIHF1YWxpZmllcjogXCJobHN2M1wiXG4gIH0sXG4gIGlnbm9yZUFzcGVjdFJhdGlvOiB7XG4gICAgcHJlZml4OiBcImZsXCIsXG4gICAgcXVhbGlmaWVyOiBcImlnbm9yZV9hc3BlY3RfcmF0aW9cIlxuICB9LFxuICBpZ25vcmVNYXNrQ2hhbm5lbHM6IHtcbiAgICBwcmVmaXg6IFwiZmxcIixcbiAgICBxdWFsaWZpZXI6IFwiaWdub3JlX21hc2tfY2hhbm5lbHNcIlxuICB9LFxuICBpbW11dGFibGVDYWNoZToge1xuICAgIHByZWZpeDogXCJmbFwiLFxuICAgIHF1YWxpZmllcjogXCJpbW11dGFibGVfY2FjaGVcIlxuICB9LFxuICBrZWVwQXR0cmlidXRpb246IHtcbiAgICBwcmVmaXg6IFwiZmxcIixcbiAgICBxdWFsaWZpZXI6IFwia2VlcF9hdHRyaWJ1dGlvblwiXG4gIH0sXG4gIGtlZXBEYXI6IHtcbiAgICBwcmVmaXg6IFwiZmxcIixcbiAgICBxdWFsaWZpZXI6IFwia2VlcF9kYXJcIlxuICB9LFxuICBrZWVwSXB0Yzoge1xuICAgIHByZWZpeDogXCJmbFwiLFxuICAgIHF1YWxpZmllcjogXCJrZWVwX2lwdGNcIlxuICB9LFxuICBsYXllckFwcGx5OiB7XG4gICAgcHJlZml4OiBcImZsXCIsXG4gICAgcXVhbGlmaWVyOiBcImxheWVyX2FwcGx5XCJcbiAgfSxcbiAgbG9zc3k6IHtcbiAgICBwcmVmaXg6IFwiZmxcIixcbiAgICBxdWFsaWZpZXI6IFwibG9zc3lcIlxuICB9LFxuICBtb25vOiB7XG4gICAgcHJlZml4OiBcImZsXCIsXG4gICAgcXVhbGlmaWVyOiBcIm1vbm9cIlxuICB9LFxuICBub092ZXJmbG93OiB7XG4gICAgcHJlZml4OiBcImZsXCIsXG4gICAgcXVhbGlmaWVyOiBcIm5vX292ZXJmbG93XCJcbiAgfSxcbiAgbm9TdHJlYW06IHtcbiAgICBwcmVmaXg6IFwiZmxcIixcbiAgICBxdWFsaWZpZXI6IFwibm9fc3RyZWFtXCJcbiAgfSxcbiAgcG5nODoge1xuICAgIHByZWZpeDogXCJmbFwiLFxuICAgIHF1YWxpZmllcjogXCJwbmc4XCJcbiAgfSxcbiAgcG5nMjQ6IHtcbiAgICBwcmVmaXg6IFwiZmxcIixcbiAgICBxdWFsaWZpZXI6IFwicG5nMjRcIlxuICB9LFxuICBwbmczMjoge1xuICAgIHByZWZpeDogXCJmbFwiLFxuICAgIHF1YWxpZmllcjogXCJwbmczMlwiXG4gIH0sXG4gIHByZXNlcnZlVHJhbnNwYXJlbmN5OiB7XG4gICAgcHJlZml4OiBcImZsXCIsXG4gICAgcXVhbGlmaWVyOiBcInByZXNlcnZlX3RyYW5zcGFyZW5jeVwiXG4gIH0sXG4gIHByb2dyZXNzaXZlOiB7XG4gICAgcHJlZml4OiBcImZsXCIsXG4gICAgcXVhbGlmaWVyOiBcInByb2dyZXNzaXZlXCJcbiAgfSxcbiAgcmFzdGVyaXplOiB7XG4gICAgcHJlZml4OiBcImZsXCIsXG4gICAgcXVhbGlmaWVyOiBcInJhc3Rlcml6ZVwiXG4gIH0sXG4gIHJlZ2lvblJlbGF0aXZlOiB7XG4gICAgcHJlZml4OiBcImZsXCIsXG4gICAgcXVhbGlmaWVyOiBcInJlZ2lvbl9yZWxhdGl2ZVwiXG4gIH0sXG4gIHJlbGF0aXZlOiB7XG4gICAgcHJlZml4OiBcImZsXCIsXG4gICAgcXVhbGlmaWVyOiBcInJlbGF0aXZlXCIsXG4gICAgbG9jYXRpb246IFwicHJpbWFyeVwiXG4gIH0sXG4gIHJlcGxhY2VJbWFnZToge1xuICAgIHByZWZpeDogXCJmbFwiLFxuICAgIHF1YWxpZmllcjogXCJyZXBsYWNlX2ltYWdlXCJcbiAgfSxcbiAgc2FuaXRpemU6IHtcbiAgICBwcmVmaXg6IFwiZmxcIixcbiAgICBxdWFsaWZpZXI6IFwic2FuaXRpemVcIlxuICB9LFxuICBzcGxpY2U6IHtcbiAgICBwcmVmaXg6IFwiZmxcIixcbiAgICBxdWFsaWZpZXI6IFwic3BsaWNlXCJcbiAgfSxcbiAgc3RyZWFtaW5nQXR0YWNobWVudDoge1xuICAgIHByZWZpeDogXCJmbFwiLFxuICAgIHF1YWxpZmllcjogXCJzdHJlYW1pbmdfYXR0YWNobWVudFwiXG4gIH0sXG4gIHN0cmlwUHJvZmlsZToge1xuICAgIHByZWZpeDogXCJmbFwiLFxuICAgIHF1YWxpZmllcjogXCJzdHJpcF9wcm9maWxlXCJcbiAgfSxcbiAgdGV4dERpc2FsbG93T3ZlcmZsb3c6IHtcbiAgICBwcmVmaXg6IFwiZmxcIixcbiAgICBxdWFsaWZpZXI6IFwidGV4dF9kaXNhbGxvd19vdmVyZmxvd1wiXG4gIH0sXG4gIHRleHROb1RyaW06IHtcbiAgICBwcmVmaXg6IFwiZmxcIixcbiAgICBxdWFsaWZpZXI6IFwidGV4dF9ub190cmltXCJcbiAgfSxcbiAgdGlmOEx6dzoge1xuICAgIHByZWZpeDogXCJmbFwiLFxuICAgIHF1YWxpZmllcjogXCJ0aWY4X2x6d1wiXG4gIH0sXG4gIHRpbGVkOiB7XG4gICAgcHJlZml4OiBcImZsXCIsXG4gICAgcXVhbGlmaWVyOiBcInRpbGVkXCJcbiAgfSxcbiAgdHJ1bmNhdGVUczoge1xuICAgIHByZWZpeDogXCJmbFwiLFxuICAgIHF1YWxpZmllcjogXCJ0cnVuY2F0ZV90c1wiXG4gIH0sXG4gIHdhdmVmb3JtOiB7XG4gICAgcHJlZml4OiBcImZsXCIsXG4gICAgcXVhbGlmaWVyOiBcIndhdmVmb3JtXCJcbiAgfVxufTtcbnZhciB2aWRlbyA9IHtcbiAgc3RyZWFtaW5nUHJvZmlsZToge1xuICAgIHF1YWxpZmllcjogXCJzcFwiLFxuICAgIGxvY2F0aW9uOiBcInByaW1hcnlcIlxuICB9XG59O1xuXG4vLyBzcmMvbGliL3RyYW5zZm9ybWF0aW9ucy50c1xuZnVuY3Rpb24gY29uc3RydWN0VHJhbnNmb3JtYXRpb24oeyBwcmVmaXgsIHF1YWxpZmllciwgdmFsdWUsIGNvbnZlcnRlcnMgfSkge1xuICBsZXQgdHJhbnNmb3JtYXRpb24gPSBcIlwiO1xuICBpZiAocHJlZml4KSB7XG4gICAgdHJhbnNmb3JtYXRpb24gPSBgJHtwcmVmaXh9X2A7XG4gIH1cbiAgbGV0IHRyYW5zZm9ybWF0aW9uVmFsdWUgPSB2YWx1ZTtcbiAgY29udmVydGVycyA9PSBudWxsID8gdm9pZCAwIDogY29udmVydGVycy5mb3JFYWNoKCh7IHRlc3QsIGNvbnZlcnQgfSkgPT4ge1xuICAgIGlmICghdGVzdCh0cmFuc2Zvcm1hdGlvblZhbHVlKSlcbiAgICAgIHJldHVybjtcbiAgICB0cmFuc2Zvcm1hdGlvblZhbHVlID0gY29udmVydCh0cmFuc2Zvcm1hdGlvblZhbHVlKTtcbiAgfSk7XG4gIGlmICh0cmFuc2Zvcm1hdGlvblZhbHVlID09PSB0cnVlIHx8IHRyYW5zZm9ybWF0aW9uVmFsdWUgPT09IFwidHJ1ZVwiKSB7XG4gICAgcmV0dXJuIGAke3RyYW5zZm9ybWF0aW9ufSR7cXVhbGlmaWVyfWA7XG4gIH1cbiAgaWYgKHR5cGVvZiB0cmFuc2Zvcm1hdGlvblZhbHVlID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB0cmFuc2Zvcm1hdGlvblZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKHByZWZpeCkge1xuICAgICAgcmV0dXJuIGAke3RyYW5zZm9ybWF0aW9ufSR7cXVhbGlmaWVyfToke3RyYW5zZm9ybWF0aW9uVmFsdWV9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGAke3F1YWxpZmllcn1fJHt0cmFuc2Zvcm1hdGlvblZhbHVlfWA7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBwcm9tcHRBcnJheVRvU3RyaW5nKHByb21wdEFycmF5KSB7XG4gIHJldHVybiBgKCR7cHJvbXB0QXJyYXkuam9pbihcIjtcIil9KWA7XG59XG5cbi8vIHNyYy9wbHVnaW5zL2VmZmVjdHMudHNcbnZhciBwcm9wczMgPSBbLi4uT2JqZWN0LmtleXMoZWZmZWN0cyksIFwiZWZmZWN0c1wiXTtcbnZhciBhc3NldFR5cGVzMyA9IFtcImltYWdlXCIsIFwiaW1hZ2VzXCIsIFwidmlkZW9cIiwgXCJ2aWRlb3NcIl07XG5mdW5jdGlvbiBwbHVnaW4zKHByb3BzMjApIHtcbiAgY29uc3QgeyBjbGRBc3NldCwgb3B0aW9ucyB9ID0gcHJvcHMyMDtcbiAgY29uc3QgdHJhbnNmb3JtYXRpb25TdHJpbmdzID0gY29uc3RydWN0VHJhbnNmb3JtYXRpb25TdHJpbmcoe1xuICAgIGVmZmVjdHMsXG4gICAgb3B0aW9uc1xuICB9KTtcbiAgdHJhbnNmb3JtYXRpb25TdHJpbmdzLmZpbHRlcigodCkgPT4gISF0KS5mb3JFYWNoKCh0cmFuc2Zvcm1hdGlvbikgPT4gY2xkQXNzZXQuZWZmZWN0KHRyYW5zZm9ybWF0aW9uKSk7XG4gIDtcbiAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5lZmZlY3RzKSkge1xuICAgIG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuZWZmZWN0cy5mb3JFYWNoKChlZmZlY3RzU2V0KSA9PiB7XG4gICAgICBjb25zdCB0cmFuc2Zvcm1hdGlvblN0cmluZyA9IGNvbnN0cnVjdFRyYW5zZm9ybWF0aW9uU3RyaW5nKHtcbiAgICAgICAgZWZmZWN0cyxcbiAgICAgICAgb3B0aW9uczogZWZmZWN0c1NldFxuICAgICAgfSkuZmlsdGVyKCh0KSA9PiAhIXQpLmpvaW4oXCIsXCIpO1xuICAgICAgY2xkQXNzZXQuZWZmZWN0KHRyYW5zZm9ybWF0aW9uU3RyaW5nKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBjb25zdHJ1Y3RUcmFuc2Zvcm1hdGlvblN0cmluZyh7IGVmZmVjdHM6IGVmZmVjdHMyLCBvcHRpb25zOiBvcHRpb25zMiB9KSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGVmZmVjdHMyKS5tYXAoKGtleSkgPT4ge1xuICAgICAgY29uc3QgeyBwcmVmaXgsIHF1YWxpZmllciwgY29udmVydGVycyB9ID0gZWZmZWN0czJba2V5XTtcbiAgICAgIHJldHVybiBjb25zdHJ1Y3RUcmFuc2Zvcm1hdGlvbih7XG4gICAgICAgIHF1YWxpZmllcixcbiAgICAgICAgcHJlZml4LFxuICAgICAgICB2YWx1ZTogb3B0aW9uczIgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMyW2tleV0sXG4gICAgICAgIGNvbnZlcnRlcnNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB7fTtcbn1cblxuLy8gc3JjL3BsdWdpbnMvZmxhZ3MudHNcbnZhciBmbGFnc19leHBvcnRzID0ge307XG5fX2V4cG9ydChmbGFnc19leHBvcnRzLCB7XG4gIGFzc2V0VHlwZXM6ICgpID0+IGFzc2V0VHlwZXM0LFxuICBwbHVnaW46ICgpID0+IHBsdWdpbjQsXG4gIHByb3BzOiAoKSA9PiBwcm9wczRcbn0pO1xudmFyIHByb3BzNCA9IFtcImZsYWdzXCJdO1xudmFyIGFzc2V0VHlwZXM0ID0gW1wiaW1hZ2VcIiwgXCJpbWFnZXNcIiwgXCJ2aWRlb1wiLCBcInZpZGVvc1wiXTtcbnZhciBzdXBwb3J0ZWRGbGFncyA9IE9iamVjdC5lbnRyaWVzKGZsYWdzKS5tYXAoKFtfLCB7IHF1YWxpZmllciB9XSkgPT4gcXVhbGlmaWVyKTtcbmZ1bmN0aW9uIHBsdWdpbjQocHJvcHMyMCkge1xuICBjb25zdCB7IGNsZEFzc2V0LCBvcHRpb25zIH0gPSBwcm9wczIwO1xuICBjb25zdCB7IGZsYWdzOiBmbGFnczIgPSBbXSB9ID0gb3B0aW9ucztcbiAgaWYgKEFycmF5LmlzQXJyYXkoZmxhZ3MyKSAmJiBmbGFnczIubGVuZ3RoID4gMCkge1xuICAgIGZsYWdzMi5mb3JFYWNoKChmbGFnKSA9PiB7XG4gICAgICBpZiAoIXN1cHBvcnRlZEZsYWdzLmluY2x1ZGVzKGZsYWcpKVxuICAgICAgICByZXR1cm47XG4gICAgICBjbGRBc3NldC5hZGRGbGFnKGZsYWcpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBmbGFnczIgPT09IFwib2JqZWN0XCIpIHtcbiAgICBPYmplY3QuZW50cmllcyhmbGFnczIpLmZvckVhY2goKFtxdWFsaWZpZXIsIHZhbHVlXSkgPT4ge1xuICAgICAgaWYgKCFzdXBwb3J0ZWRGbGFncy5pbmNsdWRlcyhxdWFsaWZpZXIpKVxuICAgICAgICByZXR1cm47XG4gICAgICBjbGRBc3NldC5hZGRUcmFuc2Zvcm1hdGlvbihgZmxfJHtxdWFsaWZpZXJ9OiR7dmFsdWV9YCk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHt9O1xufVxuXG4vLyBzcmMvcGx1Z2lucy9maWxsLWJhY2tncm91bmQudHNcbnZhciBmaWxsX2JhY2tncm91bmRfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoZmlsbF9iYWNrZ3JvdW5kX2V4cG9ydHMsIHtcbiAgYXNzZXRUeXBlczogKCkgPT4gYXNzZXRUeXBlczUsXG4gIHBsdWdpbjogKCkgPT4gcGx1Z2luNSxcbiAgcHJvcHM6ICgpID0+IHByb3BzNVxufSk7XG52YXIgcHJvcHM1ID0gW1wiZmlsbEJhY2tncm91bmRcIl07XG52YXIgYXNzZXRUeXBlczUgPSBbXCJpbWFnZVwiLCBcImltYWdlc1wiXTtcbnZhciBkZWZhdWx0Q3JvcCA9IFwicGFkXCI7XG5mdW5jdGlvbiBwbHVnaW41KHByb3BzMjApIHtcbiAgY29uc3QgeyBjbGRBc3NldCwgb3B0aW9ucyB9ID0gcHJvcHMyMDtcbiAgY29uc3QgeyBmaWxsQmFja2dyb3VuZCB9ID0gb3B0aW9ucztcbiAgaWYgKGZpbGxCYWNrZ3JvdW5kID09PSB0cnVlKSB7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IFtcbiAgICAgIFwiYl9nZW5fZmlsbFwiLFxuICAgICAgYGFyXyR7b3B0aW9ucy53aWR0aH06JHtvcHRpb25zLmhlaWdodH1gLFxuICAgICAgYHdfJHtvcHRpb25zLndpZHRofWAsXG4gICAgICBgY18ke2RlZmF1bHRDcm9wfWBcbiAgICBdO1xuICAgIGNsZEFzc2V0LmFkZFRyYW5zZm9ybWF0aW9uKHByb3BlcnRpZXMuam9pbihcIixcIikpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBmaWxsQmFja2dyb3VuZCA9PT0gXCJvYmplY3RcIikge1xuICAgIGNvbnN0IHsgY3JvcCA9IGRlZmF1bHRDcm9wLCBncmF2aXR5LCBwcm9tcHQgfSA9IGZpbGxCYWNrZ3JvdW5kO1xuICAgIGNvbnN0IHByb3BlcnRpZXMgPSBbXG4gICAgICBgYXJfJHtvcHRpb25zLndpZHRofToke29wdGlvbnMuaGVpZ2h0fWAsXG4gICAgICBgd18ke29wdGlvbnMud2lkdGh9YCxcbiAgICAgIGBjXyR7Y3JvcH1gXG4gICAgXTtcbiAgICBpZiAodHlwZW9mIHByb21wdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcHJvcGVydGllcy51bnNoaWZ0KGBiX2dlbl9maWxsOiR7cHJvbXB0fWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wZXJ0aWVzLnVuc2hpZnQoYGJfZ2VuX2ZpbGxgKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBncmF2aXR5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBwcm9wZXJ0aWVzLnB1c2goYGdfJHtncmF2aXR5fWApO1xuICAgIH1cbiAgICBjbGRBc3NldC5hZGRUcmFuc2Zvcm1hdGlvbihwcm9wZXJ0aWVzLmpvaW4oXCIsXCIpKTtcbiAgfVxuICByZXR1cm4ge307XG59XG5cbi8vIHNyYy9wbHVnaW5zL2dlbmVyYXRpdmUtcmVwbGFjZS50c1xudmFyIGdlbmVyYXRpdmVfcmVwbGFjZV9leHBvcnRzID0ge307XG5fX2V4cG9ydChnZW5lcmF0aXZlX3JlcGxhY2VfZXhwb3J0cywge1xuICBhc3NldFR5cGVzOiAoKSA9PiBhc3NldFR5cGVzNixcbiAgcGx1Z2luOiAoKSA9PiBwbHVnaW42LFxuICBwcm9wczogKCkgPT4gcHJvcHM2XG59KTtcbnZhciBwcm9wczYgPSBbXCJyZXBsYWNlXCJdO1xudmFyIGFzc2V0VHlwZXM2ID0gW1wiaW1hZ2VcIiwgXCJpbWFnZXNcIl07XG5mdW5jdGlvbiBwbHVnaW42KHByb3BzMjApIHtcbiAgY29uc3QgeyBjbGRBc3NldCwgb3B0aW9ucyB9ID0gcHJvcHMyMDtcbiAgY29uc3QgeyByZXBsYWNlID0gbnVsbCB9ID0gb3B0aW9ucztcbiAgaWYgKHJlcGxhY2UpIHtcbiAgICBsZXQgZnJvbSwgdG8sIHByZXNlcnZlR2VvbWV0cnkgPSBmYWxzZTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZXBsYWNlKSkge1xuICAgICAgZnJvbSA9IHJlcGxhY2VbMF07XG4gICAgICB0byA9IHJlcGxhY2VbMV07XG4gICAgICBwcmVzZXJ2ZUdlb21ldHJ5ID0gcmVwbGFjZVsyXSB8fCBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnJvbSA9IHJlcGxhY2UuZnJvbTtcbiAgICAgIHRvID0gcmVwbGFjZS50bztcbiAgICAgIHByZXNlcnZlR2VvbWV0cnkgPSByZXBsYWNlLnByZXNlcnZlR2VvbWV0cnkgfHwgZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHByb3BlcnRpZXMgPSBbYGVfZ2VuX3JlcGxhY2U6ZnJvbV8ke2Zyb219YCwgYHRvXyR7dG99YF07XG4gICAgaWYgKHByZXNlcnZlR2VvbWV0cnkpIHtcbiAgICAgIHByb3BlcnRpZXMucHVzaChgcHJlc2VydmUtZ2VvbWV0cnlfJHtwcmVzZXJ2ZUdlb21ldHJ5fWApO1xuICAgIH1cbiAgICBjbGRBc3NldC5lZmZlY3QocHJvcGVydGllcy5qb2luKFwiO1wiKSk7XG4gIH1cbiAgcmV0dXJuIHt9O1xufVxuXG4vLyBzcmMvcGx1Z2lucy9uYW1lZC10cmFuc2Zvcm1hdGlvbnMudHNcbnZhciBuYW1lZF90cmFuc2Zvcm1hdGlvbnNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQobmFtZWRfdHJhbnNmb3JtYXRpb25zX2V4cG9ydHMsIHtcbiAgYXNzZXRUeXBlczogKCkgPT4gYXNzZXRUeXBlczcsXG4gIHBsdWdpbjogKCkgPT4gcGx1Z2luNyxcbiAgcHJvcHM6ICgpID0+IHByb3BzNyxcbiAgc3RyaWN0OiAoKSA9PiBzdHJpY3Rcbn0pO1xudmFyIHByb3BzNyA9IFtcInRyYW5zZm9ybWF0aW9uc1wiXTtcbnZhciBhc3NldFR5cGVzNyA9IFtcImltYWdlXCIsIFwiaW1hZ2VzXCIsIFwidmlkZW9cIiwgXCJ2aWRlb3NcIl07XG52YXIgc3RyaWN0ID0gdHJ1ZTtcbmZ1bmN0aW9uIHBsdWdpbjcocHJvcHMyMCkge1xuICBjb25zdCB7IGNsZEFzc2V0LCBvcHRpb25zIH0gPSBwcm9wczIwO1xuICBsZXQgeyB0cmFuc2Zvcm1hdGlvbnMgPSBbXSB9ID0gb3B0aW9ucztcbiAgaWYgKCFBcnJheS5pc0FycmF5KHRyYW5zZm9ybWF0aW9ucykpIHtcbiAgICB0cmFuc2Zvcm1hdGlvbnMgPSBbdHJhbnNmb3JtYXRpb25zXTtcbiAgfVxuICB0cmFuc2Zvcm1hdGlvbnMuZm9yRWFjaCgodHJhbnNmb3JtYXRpb24pID0+IHtcbiAgICBjbGRBc3NldC5hZGRUcmFuc2Zvcm1hdGlvbihgdF8ke3RyYW5zZm9ybWF0aW9ufWApO1xuICB9KTtcbiAgcmV0dXJuIHt9O1xufVxuXG4vLyBzcmMvcGx1Z2lucy9vdmVybGF5cy50c1xudmFyIG92ZXJsYXlzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KG92ZXJsYXlzX2V4cG9ydHMsIHtcbiAgREVGQVVMVF9URVhUX09QVElPTlM6ICgpID0+IERFRkFVTFRfVEVYVF9PUFRJT05TLFxuICBhc3NldFR5cGVzOiAoKSA9PiBhc3NldFR5cGVzOCxcbiAgcGx1Z2luOiAoKSA9PiBwbHVnaW44LFxuICBwcm9wczogKCkgPT4gcHJvcHM4XG59KTtcbmltcG9ydCB7IGVuY29kZUJhc2U2NCwgb2JqZWN0SGFzS2V5LCBzb3J0QnlLZXkgfSBmcm9tIFwiQGNsb3VkaW5hcnktdXRpbC91dGlsXCI7XG52YXIgcHJvcHM4ID0gW1widGV4dFwiLCBcIm92ZXJsYXlzXCJdO1xudmFyIGFzc2V0VHlwZXM4ID0gW1wiaW1hZ2VcIiwgXCJpbWFnZXNcIiwgXCJ2aWRlb1wiLCBcInZpZGVvc1wiXTtcbnZhciBERUZBVUxUX1RFWFRfT1BUSU9OUyA9IHtcbiAgY29sb3I6IFwiYmxhY2tcIixcbiAgZm9udEZhbWlseTogXCJBcmlhbFwiLFxuICBmb250U2l6ZTogMjAwLFxuICBmb250V2VpZ2h0OiBcImJvbGRcIlxufTtcbnZhciBzdXBwb3J0ZWRGbGFnczIgPSBPYmplY3QuZW50cmllcyhmbGFncykubWFwKChbXywgeyBxdWFsaWZpZXIgfV0pID0+IHF1YWxpZmllcik7XG5mdW5jdGlvbiBwbHVnaW44KHByb3BzMjApIHtcbiAgY29uc3QgeyBjbGRBc3NldCwgb3B0aW9ucyB9ID0gcHJvcHMyMDtcbiAgY29uc3QgeyB0ZXh0OiB0ZXh0Miwgb3ZlcmxheXMgPSBbXSB9ID0gb3B0aW9ucztcbiAgY29uc3QgdHlwZSA9IFwib3ZlcmxheVwiO1xuICBjb25zdCB0eXBlUXVhbGlmaWVyID0gXCJsXCI7XG4gIGlmIChBcnJheS5pc0FycmF5KG92ZXJsYXlzKSkge1xuICAgIG92ZXJsYXlzLmZvckVhY2goYXBwbHlPdmVybGF5KTtcbiAgfVxuICBpZiAodHlwZW9mIHRleHQyID09PSBcInN0cmluZ1wiKSB7XG4gICAgYXBwbHlPdmVybGF5KHtcbiAgICAgIHRleHQ6IHtcbiAgICAgICAgLi4uREVGQVVMVF9URVhUX09QVElPTlMsXG4gICAgICAgIHRleHQ6IHRleHQyXG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHRleHQyID09PSBcIm9iamVjdFwiKSB7XG4gICAgYXBwbHlPdmVybGF5KHtcbiAgICAgIHRleHQ6IHtcbiAgICAgICAgLi4uREVGQVVMVF9URVhUX09QVElPTlMsXG4gICAgICAgIC4uLnRleHQyXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gYXBwbHlPdmVybGF5KHsgcHVibGljSWQsIHVybCwgcG9zaXRpb246IHBvc2l0aW9uMiwgdGV4dDogdGV4dDMsIGVmZmVjdHM6IGxheWVyRWZmZWN0cyA9IFtdLCBhcHBsaWVkRWZmZWN0cyA9IFtdLCBmbGFnczogbGF5ZXJGbGFncyA9IFtdLCBhcHBsaWVkRmxhZ3MgPSBbXSwgLi4ub3B0aW9uczIgfSkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBoYXNQdWJsaWNJZCA9IHR5cGVvZiBwdWJsaWNJZCA9PT0gXCJzdHJpbmdcIjtcbiAgICBjb25zdCBoYXNVcmwgPSB0eXBlb2YgdXJsID09PSBcInN0cmluZ1wiO1xuICAgIGNvbnN0IGhhc1RleHQgPSB0eXBlb2YgdGV4dDMgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIHRleHQzID09PSBcInN0cmluZ1wiO1xuICAgIGNvbnN0IGhhc1Bvc2l0aW9uID0gdHlwZW9mIHBvc2l0aW9uMiA9PT0gXCJvYmplY3RcIjtcbiAgICBpZiAoIWhhc1B1YmxpY0lkICYmICFoYXNVcmwgJiYgIWhhc1RleHQpIHtcbiAgICAgIGNvbnNvbGUud2FybihgQW4gJHt0eXBlfSBpcyBtaXNzaW5nIFB1YmxpYyBJRCwgVVJMLCBvciBUZXh0YCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBsYXllclRyYW5zZm9ybWF0aW9uO1xuICAgIGlmIChoYXNUZXh0KSB7XG4gICAgICBsYXllclRyYW5zZm9ybWF0aW9uID0gYCR7dHlwZVF1YWxpZmllcn1fdGV4dGA7XG4gICAgfSBlbHNlIGlmIChoYXNQdWJsaWNJZCkge1xuICAgICAgbGF5ZXJUcmFuc2Zvcm1hdGlvbiA9IGAke3R5cGVRdWFsaWZpZXJ9XyR7cHVibGljSWQucmVwbGFjZSgvXFwvL2csIFwiOlwiKX1gO1xuICAgIH0gZWxzZSBpZiAoaGFzVXJsKSB7XG4gICAgICBsYXllclRyYW5zZm9ybWF0aW9uID0gYCR7dHlwZVF1YWxpZmllcn1fZmV0Y2g6JHtlbmNvZGVCYXNlNjQodXJsKX1gO1xuICAgIH1cbiAgICBjb25zdCBwcmltYXJ5MiA9IFtdO1xuICAgIGNvbnN0IGFwcGxpZWQgPSBbXTtcbiAgICBPYmplY3Qua2V5cyhvcHRpb25zMikuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAoIW9iamVjdEhhc0tleShwcmltYXJ5LCBrZXkpKVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCB7IHF1YWxpZmllciwgY29udmVydGVycyB9ID0gcHJpbWFyeVtrZXldO1xuICAgICAgY29uc3QgdHJhbnNmb3JtYXRpb24gPSBjb25zdHJ1Y3RUcmFuc2Zvcm1hdGlvbih7XG4gICAgICAgIHF1YWxpZmllcixcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMyW2tleV0sXG4gICAgICAgIGNvbnZlcnRlcnNcbiAgICAgIH0pO1xuICAgICAgaWYgKHRyYW5zZm9ybWF0aW9uKSB7XG4gICAgICAgIHByaW1hcnkyLnB1c2godHJhbnNmb3JtYXRpb24pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGxheWVyRWZmZWN0cy5mb3JFYWNoKChlZmZlY3QpID0+IHtcbiAgICAgIE9iamVjdC5rZXlzKGVmZmVjdCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IGVmZmVjdFF1YWxpZmllciA9IHByaW1hcnlba2V5XSB8fCBlZmZlY3RzW2tleV0gfHwgcG9zaXRpb25ba2V5XTtcbiAgICAgICAgaWYgKCFlZmZlY3RRdWFsaWZpZXIpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB7IHF1YWxpZmllciwgcHJlZml4LCBjb252ZXJ0ZXJzIH0gPSBlZmZlY3RRdWFsaWZpZXI7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybWF0aW9uID0gY29uc3RydWN0VHJhbnNmb3JtYXRpb24oe1xuICAgICAgICAgIHF1YWxpZmllcixcbiAgICAgICAgICBwcmVmaXgsXG4gICAgICAgICAgdmFsdWU6IGVmZmVjdFtrZXldLFxuICAgICAgICAgIGNvbnZlcnRlcnNcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICAgIHByaW1hcnkyLnB1c2godHJhbnNmb3JtYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBhcHBsaWVkRWZmZWN0cy5mb3JFYWNoKChlZmZlY3QpID0+IHtcbiAgICAgIE9iamVjdC5rZXlzKGVmZmVjdCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IGVmZmVjdFF1YWxpZmllciA9IHByaW1hcnlba2V5XSB8fCBlZmZlY3RzW2tleV0gfHwgcG9zaXRpb25ba2V5XTtcbiAgICAgICAgaWYgKCFlZmZlY3RRdWFsaWZpZXIpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB7IHF1YWxpZmllciwgcHJlZml4LCBjb252ZXJ0ZXJzIH0gPSBlZmZlY3RRdWFsaWZpZXI7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybWF0aW9uID0gY29uc3RydWN0VHJhbnNmb3JtYXRpb24oe1xuICAgICAgICAgIHF1YWxpZmllcixcbiAgICAgICAgICBwcmVmaXgsXG4gICAgICAgICAgdmFsdWU6IGVmZmVjdFtrZXldLFxuICAgICAgICAgIGNvbnZlcnRlcnNcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICAgIGFwcGxpZWQucHVzaCh0cmFuc2Zvcm1hdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGxheWVyRmxhZ3MuZm9yRWFjaCgoZmxhZykgPT4ge1xuICAgICAgaWYgKCFzdXBwb3J0ZWRGbGFnczIuaW5jbHVkZXMoZmxhZykpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHByaW1hcnkyLnB1c2goYGZsXyR7ZmxhZ31gKTtcbiAgICB9KTtcbiAgICBhcHBsaWVkRmxhZ3MuZm9yRWFjaCgoZmxhZykgPT4ge1xuICAgICAgaWYgKCFzdXBwb3J0ZWRGbGFnczIuaW5jbHVkZXMoZmxhZykpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGFwcGxpZWQucHVzaChgZmxfJHtmbGFnfWApO1xuICAgIH0pO1xuICAgIGlmIChoYXNUZXh0KSB7XG4gICAgICBpZiAodHlwZW9mIHRleHQzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRleHQzID0ge1xuICAgICAgICAgIC4uLkRFRkFVTFRfVEVYVF9PUFRJT05TLFxuICAgICAgICAgIHRleHQ6IHRleHQzXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBjb25zdCB0ZXh0VHJhbnNmb3JtYXRpb25zID0gW107XG4gICAgICBpZiAodHlwZW9mIHRleHQzID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGNvbnN0IHRleHRPcHRpb25zID0gT2JqZWN0LmtleXModGV4dDMpLmZpbHRlcigoa2V5KSA9PiBvYmplY3RIYXNLZXkodGV4dCwga2V5KSkubWFwKChrZXkpID0+IHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRleHQzICYmIG9iamVjdEhhc0tleSh0ZXh0Mywga2V5KSAmJiB0ZXh0M1trZXldO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi50ZXh0W2tleV0sXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIG9yZGVyOiB0ZXh0W2tleV0ub3JkZXIgfHwgOTlcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc29ydGVkVGV4dE9wdGlvbnMgPSBzb3J0QnlLZXkodGV4dE9wdGlvbnMsIFwib3JkZXJcIik7XG4gICAgICAgIGZvciAoY29uc3QgdGV4dE9wdGlvbiBvZiBzb3J0ZWRUZXh0T3B0aW9ucykge1xuICAgICAgICAgIGNvbnN0IHsga2V5LCB2YWx1ZSwgcXVhbGlmaWVyLCBsb2NhdGlvbiwgY29udmVydGVycyB9ID0gdGV4dE9wdGlvbjtcbiAgICAgICAgICBsZXQgdGV4dFZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgY29udmVydGVycyA9PSBudWxsID8gdm9pZCAwIDogY29udmVydGVycy5mb3JFYWNoKCh7IHRlc3QsIGNvbnZlcnQgfSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0ZXN0KHZhbHVlKSlcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGV4dFZhbHVlID0gY29udmVydCh2YWx1ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKGxvY2F0aW9uID09PSBcInByaW1hcnlcIikge1xuICAgICAgICAgICAgcHJpbWFyeTIucHVzaChgJHtxdWFsaWZpZXJ9XyR7dGV4dFZhbHVlfWApO1xuICAgICAgICAgIH0gZWxzZSBpZiAocXVhbGlmaWVyID09PSBcInNlbGZcIikge1xuICAgICAgICAgICAgdGV4dFRyYW5zZm9ybWF0aW9ucy5wdXNoKGtleSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChxdWFsaWZpZXIpIHtcbiAgICAgICAgICAgIHRleHRUcmFuc2Zvcm1hdGlvbnMucHVzaChgJHtxdWFsaWZpZXJ9XyR7dGV4dFZhbHVlfWApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZXh0VHJhbnNmb3JtYXRpb25zLnB1c2godGV4dFZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHNwZWNpYWxDaGFyYWN0ZXJzID0ge1xuICAgICAgICBcIi5cIjogXCIlMkVcIixcbiAgICAgICAgXCIsXCI6IFwiJTJDXCIsXG4gICAgICAgIFwiL1wiOiBcIiUyRlwiXG4gICAgICB9O1xuICAgICAgbGV0IGxheWVyVGV4dCA9ICh0ZXh0MyA9PSBudWxsID8gdm9pZCAwIDogdGV4dDMudGV4dCkgfHwgXCJcIjtcbiAgICAgIGlmICh0eXBlb2YgbGF5ZXJUZXh0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIChfYSA9IE9iamVjdC5rZXlzKHNwZWNpYWxDaGFyYWN0ZXJzKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmZvckVhY2goKGNoYXJhY3RlcikgPT4ge1xuICAgICAgICAgIGxheWVyVGV4dCA9IGxheWVyVGV4dCA9PSBudWxsID8gdm9pZCAwIDogbGF5ZXJUZXh0LnJlcGxhY2UoY2hhcmFjdGVyLCBzcGVjaWFsQ2hhcmFjdGVyc1tjaGFyYWN0ZXJdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBsYXllclRyYW5zZm9ybWF0aW9uID0gYCR7bGF5ZXJUcmFuc2Zvcm1hdGlvbn06JHt0ZXh0VHJhbnNmb3JtYXRpb25zLmpvaW4oXCJfXCIpfToke2xheWVyVGV4dH1gO1xuICAgIH1cbiAgICBpZiAoaGFzUG9zaXRpb24pIHtcbiAgICAgIE9iamVjdC5rZXlzKHBvc2l0aW9uMikuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGlmICghb2JqZWN0SGFzS2V5KHBvc2l0aW9uLCBrZXkpKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgeyBxdWFsaWZpZXIsIGNvbnZlcnRlcnMgfSA9IHBvc2l0aW9uW2tleV07XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybWF0aW9uID0gY29uc3RydWN0VHJhbnNmb3JtYXRpb24oe1xuICAgICAgICAgIHF1YWxpZmllcixcbiAgICAgICAgICB2YWx1ZTogcG9zaXRpb24yW2tleV0sXG4gICAgICAgICAgY29udmVydGVyc1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRyYW5zZm9ybWF0aW9uKSB7XG4gICAgICAgICAgYXBwbGllZC5wdXNoKHRyYW5zZm9ybWF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChwcmltYXJ5Mi5sZW5ndGggPiAwKSB7XG4gICAgICBsYXllclRyYW5zZm9ybWF0aW9uID0gYCR7bGF5ZXJUcmFuc2Zvcm1hdGlvbn0sJHtwcmltYXJ5Mi5qb2luKFwiLFwiKX1gO1xuICAgIH1cbiAgICBsYXllclRyYW5zZm9ybWF0aW9uID0gYCR7bGF5ZXJUcmFuc2Zvcm1hdGlvbn0vZmxfbGF5ZXJfYXBwbHksZmxfbm9fb3ZlcmZsb3dgO1xuICAgIGlmIChhcHBsaWVkLmxlbmd0aCA+IDApIHtcbiAgICAgIGxheWVyVHJhbnNmb3JtYXRpb24gPSBgJHtsYXllclRyYW5zZm9ybWF0aW9ufSwke2FwcGxpZWQuam9pbihcIixcIil9YDtcbiAgICB9XG4gICAgY2xkQXNzZXQuYWRkVHJhbnNmb3JtYXRpb24obGF5ZXJUcmFuc2Zvcm1hdGlvbik7XG4gIH1cbiAgcmV0dXJuIHt9O1xufVxuXG4vLyBzcmMvcGx1Z2lucy9yYXctdHJhbnNmb3JtYXRpb25zLnRzXG52YXIgcmF3X3RyYW5zZm9ybWF0aW9uc19leHBvcnRzID0ge307XG5fX2V4cG9ydChyYXdfdHJhbnNmb3JtYXRpb25zX2V4cG9ydHMsIHtcbiAgYXNzZXRUeXBlczogKCkgPT4gYXNzZXRUeXBlczksXG4gIHBsdWdpbjogKCkgPT4gcGx1Z2luOSxcbiAgcHJvcHM6ICgpID0+IHByb3BzOVxufSk7XG52YXIgcHJvcHM5ID0gW1wicmF3VHJhbnNmb3JtYXRpb25zXCJdO1xudmFyIGFzc2V0VHlwZXM5ID0gW1wiaW1hZ2VcIiwgXCJpbWFnZXNcIiwgXCJ2aWRlb1wiLCBcInZpZGVvc1wiXTtcbmZ1bmN0aW9uIHBsdWdpbjkocHJvcHMyMCkge1xuICBjb25zdCB7IGNsZEFzc2V0LCBvcHRpb25zIH0gPSBwcm9wczIwO1xuICBjb25zdCB7IHJhd1RyYW5zZm9ybWF0aW9ucyA9IFtdIH0gPSBvcHRpb25zO1xuICByYXdUcmFuc2Zvcm1hdGlvbnMuZm9yRWFjaCgodHJhbnNmb3JtYXRpb24pID0+IHtcbiAgICBjbGRBc3NldC5hZGRUcmFuc2Zvcm1hdGlvbih0cmFuc2Zvcm1hdGlvbik7XG4gIH0pO1xuICByZXR1cm4ge307XG59XG5cbi8vIHNyYy9wbHVnaW5zL3JlY29sb3IudHNcbnZhciByZWNvbG9yX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHJlY29sb3JfZXhwb3J0cywge1xuICBhc3NldFR5cGVzOiAoKSA9PiBhc3NldFR5cGVzMTAsXG4gIHBsdWdpbjogKCkgPT4gcGx1Z2luMTAsXG4gIHByb3BzOiAoKSA9PiBwcm9wczEwXG59KTtcbnZhciBwcm9wczEwID0gW1wicmVjb2xvclwiXTtcbnZhciBhc3NldFR5cGVzMTAgPSBbXCJpbWFnZVwiLCBcImltYWdlc1wiXTtcbmZ1bmN0aW9uIHBsdWdpbjEwKHByb3BzMjApIHtcbiAgY29uc3QgeyBjbGRBc3NldCwgb3B0aW9ucyB9ID0gcHJvcHMyMDtcbiAgY29uc3QgeyByZWNvbG9yIH0gPSBvcHRpb25zO1xuICBjb25zdCByZWNvbG9yT3B0aW9ucyA9IHtcbiAgICBwcm9tcHQ6IHZvaWQgMCxcbiAgICBcInRvLWNvbG9yXCI6IHZvaWQgMCxcbiAgICBtdWx0aXBsZTogdm9pZCAwXG4gIH07XG4gIGlmIChBcnJheS5pc0FycmF5KHJlY29sb3IpKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVjb2xvclswXSkpIHtcbiAgICAgIHJlY29sb3JPcHRpb25zLnByb21wdCA9IHByb21wdEFycmF5VG9TdHJpbmcocmVjb2xvclswXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlY29sb3JPcHRpb25zLnByb21wdCA9IHJlY29sb3JbMF07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVjb2xvclsxXSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmVjb2xvck9wdGlvbnNbXCJ0by1jb2xvclwiXSA9IHJlY29sb3JbMV07XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiByZWNvbG9yID09PSBcIm9iamVjdFwiKSB7XG4gICAgaWYgKHR5cGVvZiByZWNvbG9yLnByb21wdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmVjb2xvck9wdGlvbnMucHJvbXB0ID0gcmVjb2xvci5wcm9tcHQ7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlY29sb3IucHJvbXB0KSkge1xuICAgICAgcmVjb2xvck9wdGlvbnMucHJvbXB0ID0gcHJvbXB0QXJyYXlUb1N0cmluZyhyZWNvbG9yLnByb21wdCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVjb2xvci50byA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmVjb2xvck9wdGlvbnNbXCJ0by1jb2xvclwiXSA9IHJlY29sb3IudG87XG4gICAgfVxuICAgIGlmIChyZWNvbG9yLm11bHRpcGxlID09PSB0cnVlKSB7XG4gICAgICByZWNvbG9yT3B0aW9ucy5tdWx0aXBsZSA9IGB0cnVlYDtcbiAgICB9XG4gIH1cbiAgY29uc3QgdHJhbnNmb3JtYXRpb24gPSBPYmplY3QuZW50cmllcyhyZWNvbG9yT3B0aW9ucykuZmlsdGVyKChbLCB2YWx1ZV0pID0+ICEhdmFsdWUpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBgJHtrZXl9XyR7dmFsdWV9YCkuam9pbihcIjtcIik7XG4gIGlmICh0cmFuc2Zvcm1hdGlvbikge1xuICAgIGNsZEFzc2V0LmFkZFRyYW5zZm9ybWF0aW9uKGBlX2dlbl9yZWNvbG9yOiR7dHJhbnNmb3JtYXRpb259YCk7XG4gIH1cbiAgcmV0dXJuIHt9O1xufVxuXG4vLyBzcmMvcGx1Z2lucy9yZW1vdmUudHNcbnZhciByZW1vdmVfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQocmVtb3ZlX2V4cG9ydHMsIHtcbiAgYXNzZXRUeXBlczogKCkgPT4gYXNzZXRUeXBlczExLFxuICBwbHVnaW46ICgpID0+IHBsdWdpbjExLFxuICBwcm9wczogKCkgPT4gcHJvcHMxMVxufSk7XG52YXIgcHJvcHMxMSA9IFtcInJlbW92ZVwiXTtcbnZhciBhc3NldFR5cGVzMTEgPSBbXCJpbWFnZVwiLCBcImltYWdlc1wiXTtcbmZ1bmN0aW9uIHBsdWdpbjExKHByb3BzMjApIHtcbiAgY29uc3QgeyBjbGRBc3NldCwgb3B0aW9ucyB9ID0gcHJvcHMyMDtcbiAgY29uc3QgeyByZW1vdmUgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHJlbW92ZU9wdGlvbnMgPSB7XG4gICAgcHJvbXB0OiB2b2lkIDAsXG4gICAgcmVnaW9uOiB2b2lkIDAsXG4gICAgbXVsdGlwbGU6IHZvaWQgMCxcbiAgICBcInJlbW92ZS1zaGFkb3dcIjogdm9pZCAwXG4gIH07XG4gIGlmICh0eXBlb2YgcmVtb3ZlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmVtb3ZlT3B0aW9ucy5wcm9tcHQgPSByZW1vdmU7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZW1vdmUpKSB7XG4gICAgcmVtb3ZlT3B0aW9ucy5wcm9tcHQgPSBwcm9tcHRBcnJheVRvU3RyaW5nKHJlbW92ZSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHJlbW92ZSA9PT0gXCJvYmplY3RcIikge1xuICAgIGNvbnN0IGhhc1Byb21wdCA9IHR5cGVvZiByZW1vdmUucHJvbXB0ID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkocmVtb3ZlLnByb21wdCk7XG4gICAgY29uc3QgaGFzUmVnaW9uID0gQXJyYXkuaXNBcnJheShyZW1vdmUucmVnaW9uKTtcbiAgICBpZiAoaGFzUHJvbXB0ICYmIGhhc1JlZ2lvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCByZW1vdmUgb3B0aW9uczogeW91IGNhbiBub3QgaGF2ZSBib3RoIGEgcHJvbXB0IGFuZCBhIHJlZ2lvbi4gTW9yZSBpbmZvOiBodHRwczovL2Nsb3VkaW5hcnkuY29tL2RvY3VtZW50YXRpb24vdHJhbnNmb3JtYXRpb25fcmVmZXJlbmNlI2VfZ2VuX3JlbW92ZVwiKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZW1vdmUucHJvbXB0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZW1vdmVPcHRpb25zLnByb21wdCA9IHJlbW92ZS5wcm9tcHQ7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlbW92ZS5wcm9tcHQpKSB7XG4gICAgICByZW1vdmVPcHRpb25zLnByb21wdCA9IHByb21wdEFycmF5VG9TdHJpbmcocmVtb3ZlLnByb21wdCk7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHJlbW92ZS5yZWdpb24pKSB7XG4gICAgICByZW1vdmVPcHRpb25zLnJlZ2lvbiA9IHJlZ2lvbkFycmF5VG9TdHJpbmcocmVtb3ZlLnJlZ2lvbik7XG4gICAgfVxuICAgIGlmIChyZW1vdmUubXVsdGlwbGUgPT09IHRydWUpIHtcbiAgICAgIHJlbW92ZU9wdGlvbnMubXVsdGlwbGUgPSBgdHJ1ZWA7XG4gICAgfVxuICAgIGlmIChyZW1vdmUucmVtb3ZlU2hhZG93ID09PSB0cnVlKSB7XG4gICAgICByZW1vdmVPcHRpb25zW1wicmVtb3ZlLXNoYWRvd1wiXSA9IGB0cnVlYDtcbiAgICB9XG4gIH1cbiAgY29uc3QgdHJhbnNmb3JtYXRpb24gPSBPYmplY3QuZW50cmllcyhyZW1vdmVPcHRpb25zKS5maWx0ZXIoKFssIHZhbHVlXSkgPT4gISF2YWx1ZSkubWFwKChba2V5LCB2YWx1ZV0pID0+IGAke2tleX1fJHt2YWx1ZX1gKS5qb2luKFwiO1wiKTtcbiAgaWYgKHRyYW5zZm9ybWF0aW9uKSB7XG4gICAgY2xkQXNzZXQuYWRkVHJhbnNmb3JtYXRpb24oYGVfZ2VuX3JlbW92ZToke3RyYW5zZm9ybWF0aW9ufWApO1xuICB9XG4gIHJldHVybiB7fTtcbn1cbmZ1bmN0aW9uIHJlZ2lvbkFycmF5VG9TdHJpbmcocmVnaW9uQXJyYXkpIHtcbiAgY29uc3QgaW5kZXhlcyA9IHtcbiAgICAwOiBcInhcIixcbiAgICAxOiBcInlcIixcbiAgICAyOiBcIndcIixcbiAgICAzOiBcImhcIlxuICB9O1xuICBjb25zdCByZWdpb25TdHJpbmcgPSByZWdpb25BcnJheS5tYXAoKHJlZ2lvbiwgaW5kZXgpID0+IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZWdpb24pKSB7XG4gICAgICByZXR1cm4gcmVnaW9uQXJyYXlUb1N0cmluZyhyZWdpb24pO1xuICAgIH1cbiAgICBjb25zdCBrZXkgPSBpbmRleGVzW2luZGV4XTtcbiAgICByZXR1cm4gYCR7a2V5fV8ke3JlZ2lvbn1gO1xuICB9KS5qb2luKFwiO1wiKTtcbiAgcmV0dXJuIGAoJHtyZWdpb25TdHJpbmd9KWA7XG59XG5cbi8vIHNyYy9wbHVnaW5zL3JlbW92ZS1iYWNrZ3JvdW5kLnRzXG52YXIgcmVtb3ZlX2JhY2tncm91bmRfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQocmVtb3ZlX2JhY2tncm91bmRfZXhwb3J0cywge1xuICBhc3NldFR5cGVzOiAoKSA9PiBhc3NldFR5cGVzMTIsXG4gIHBsdWdpbjogKCkgPT4gcGx1Z2luMTIsXG4gIHByb3BzOiAoKSA9PiBwcm9wczEyXG59KTtcbnZhciBwcm9wczEyID0gW1wicmVtb3ZlQmFja2dyb3VuZFwiXTtcbnZhciBhc3NldFR5cGVzMTIgPSBbXCJpbWFnZVwiLCBcImltYWdlc1wiXTtcbmZ1bmN0aW9uIHBsdWdpbjEyKHByb3BzMjApIHtcbiAgY29uc3QgeyBjbGRBc3NldCwgb3B0aW9ucyB9ID0gcHJvcHMyMDtcbiAgY29uc3QgeyByZW1vdmVCYWNrZ3JvdW5kID0gZmFsc2UgfSA9IG9wdGlvbnM7XG4gIGlmIChyZW1vdmVCYWNrZ3JvdW5kKSB7XG4gICAgY2xkQXNzZXQuZWZmZWN0KFwiZV9iYWNrZ3JvdW5kX3JlbW92YWxcIik7XG4gIH1cbiAgcmV0dXJuIHt9O1xufVxuXG4vLyBzcmMvcGx1Z2lucy9yZXN0b3JlLnRzXG52YXIgcmVzdG9yZV9leHBvcnRzID0ge307XG5fX2V4cG9ydChyZXN0b3JlX2V4cG9ydHMsIHtcbiAgYXNzZXRUeXBlczogKCkgPT4gYXNzZXRUeXBlczEzLFxuICBwbHVnaW46ICgpID0+IHBsdWdpbjEzLFxuICBwcm9wczogKCkgPT4gcHJvcHMxM1xufSk7XG52YXIgcHJvcHMxMyA9IFtcInJlc3RvcmVcIl07XG52YXIgYXNzZXRUeXBlczEzID0gW1wiaW1hZ2VcIiwgXCJpbWFnZXNcIl07XG5mdW5jdGlvbiBwbHVnaW4xMyhwcm9wczIwKSB7XG4gIGNvbnN0IHsgY2xkQXNzZXQsIG9wdGlvbnMgfSA9IHByb3BzMjA7XG4gIGNvbnN0IHsgcmVzdG9yZSA9IGZhbHNlIH0gPSBvcHRpb25zO1xuICBpZiAocmVzdG9yZSkge1xuICAgIGNsZEFzc2V0LmVmZmVjdChcImVfZ2VuX3Jlc3RvcmVcIik7XG4gIH1cbiAgcmV0dXJuIHt9O1xufVxuXG4vLyBzcmMvcGx1Z2lucy9zYW5pdGl6ZS50c1xudmFyIHNhbml0aXplX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNhbml0aXplX2V4cG9ydHMsIHtcbiAgYXNzZXRUeXBlczogKCkgPT4gYXNzZXRUeXBlczE0LFxuICBwbHVnaW46ICgpID0+IHBsdWdpbjE0LFxuICBwcm9wczogKCkgPT4gcHJvcHMxNFxufSk7XG52YXIgcHJvcHMxNCA9IFtcInNhbml0aXplXCJdO1xudmFyIGFzc2V0VHlwZXMxNCA9IFtcImltYWdlXCIsIFwiaW1hZ2VzXCJdO1xuZnVuY3Rpb24gcGx1Z2luMTQocHJvcHMyMCkge1xuICBjb25zdCB7IGNsZEFzc2V0LCBvcHRpb25zIH0gPSBwcm9wczIwO1xuICBjb25zdCB7IHNhbml0aXplID0gdHJ1ZSB9ID0gb3B0aW9ucztcbiAgY29uc3Qgc2hvdWxkQXBwbHlTYW5pdGl6ZXIgPSBzYW5pdGl6ZSAmJiAob3B0aW9ucy5mb3JtYXQgPT09IFwic3ZnXCIgfHwgY2xkQXNzZXQucHVibGljSUQuZW5kc1dpdGgoXCIuc3ZnXCIpKTtcbiAgaWYgKHNob3VsZEFwcGx5U2FuaXRpemVyKSB7XG4gICAgY2xkQXNzZXQuZWZmZWN0KFwiZmxfc2FuaXRpemVcIik7XG4gIH1cbiAgcmV0dXJuIHt9O1xufVxuXG4vLyBzcmMvcGx1Z2lucy9zZW8udHNcbnZhciBzZW9fZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc2VvX2V4cG9ydHMsIHtcbiAgYXNzZXRUeXBlczogKCkgPT4gYXNzZXRUeXBlczE1LFxuICBwbHVnaW46ICgpID0+IHBsdWdpbjE1LFxuICBwcm9wczogKCkgPT4gcHJvcHMxNVxufSk7XG52YXIgcHJvcHMxNSA9IFtcInNlb1N1ZmZpeFwiXTtcbnZhciBhc3NldFR5cGVzMTUgPSBbXCJpbWFnZVwiLCBcImltYWdlc1wiLCBcInZpZGVvXCIsIFwidmlkZW9zXCJdO1xuZnVuY3Rpb24gcGx1Z2luMTUocHJvcHMyMCkge1xuICBjb25zdCB7IGNsZEFzc2V0LCBvcHRpb25zIH0gPSBwcm9wczIwO1xuICBjb25zdCB7IHNlb1N1ZmZpeCB9ID0gb3B0aW9ucztcbiAgaWYgKHR5cGVvZiBzZW9TdWZmaXggPT09IFwic3RyaW5nXCIpIHtcbiAgICBpZiAob3B0aW9ucy5kZWxpdmVyeVR5cGUgPT09IFwiZmV0Y2hcIikge1xuICAgICAgY29uc29sZS53YXJuKFwiU0VPIHN1ZmZpeCBpcyBub3Qgc3VwcG9ydGVkIHdpdGggYSBkZWxpdmVyeSB0eXBlIG9mIGZldGNoXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjbGRBc3NldC5zZXRTdWZmaXgoc2VvU3VmZml4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHt9O1xufVxuXG4vLyBzcmMvcGx1Z2lucy91bmRlcmxheXMudHNcbnZhciB1bmRlcmxheXNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQodW5kZXJsYXlzX2V4cG9ydHMsIHtcbiAgYXNzZXRUeXBlczogKCkgPT4gYXNzZXRUeXBlczE2LFxuICBwbHVnaW46ICgpID0+IHBsdWdpbjE2LFxuICBwcm9wczogKCkgPT4gcHJvcHMxNlxufSk7XG5pbXBvcnQgeyBvYmplY3RIYXNLZXkgYXMgb2JqZWN0SGFzS2V5MiB9IGZyb20gXCJAY2xvdWRpbmFyeS11dGlsL3V0aWxcIjtcbnZhciBwcm9wczE2ID0gW1widW5kZXJsYXlcIiwgXCJ1bmRlcmxheXNcIl07XG52YXIgYXNzZXRUeXBlczE2ID0gW1wiaW1hZ2VcIiwgXCJpbWFnZXNcIiwgXCJ2aWRlb1wiLCBcInZpZGVvc1wiXTtcbmZ1bmN0aW9uIHBsdWdpbjE2KHByb3BzMjApIHtcbiAgY29uc3QgeyBjbGRBc3NldCwgb3B0aW9ucyB9ID0gcHJvcHMyMDtcbiAgY29uc3QgeyB1bmRlcmxheSwgdW5kZXJsYXlzID0gW10gfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHR5cGVRdWFsaWZpZXIgPSBcInVcIjtcbiAgaWYgKEFycmF5LmlzQXJyYXkodW5kZXJsYXlzKSkge1xuICAgIHVuZGVybGF5cy5mb3JFYWNoKGFwcGx5VW5kZXJsYXkpO1xuICB9XG4gIGlmICh0eXBlb2YgdW5kZXJsYXkgPT09IFwic3RyaW5nXCIpIHtcbiAgICBjb25zdCB1bmRlcmxheU9wdGlvbnMgPSB7XG4gICAgICBwdWJsaWNJZDogdW5kZXJsYXksXG4gICAgICBjcm9wOiBcImZpbGxcIixcbiAgICAgIHdpZHRoOiBcIjEuMFwiLFxuICAgICAgaGVpZ2h0OiBcIjEuMFwiLFxuICAgICAgZmxhZ3M6IFtcInJlbGF0aXZlXCJdXG4gICAgfTtcbiAgICBhcHBseVVuZGVybGF5KHVuZGVybGF5T3B0aW9ucyk7XG4gIH1cbiAgZnVuY3Rpb24gYXBwbHlVbmRlcmxheSh7IHB1YmxpY0lkLCB0eXBlLCBwb3NpdGlvbjogcG9zaXRpb24yLCBlZmZlY3RzOiBsYXllckVmZmVjdHMgPSBbXSwgZmxhZ3M6IGZsYWdzMiA9IFtdLCAuLi5vcHRpb25zMiB9KSB7XG4gICAgY29uc3QgaGFzUHVibGljSWQgPSB0eXBlb2YgcHVibGljSWQgPT09IFwic3RyaW5nXCI7XG4gICAgY29uc3QgaGFzUG9zaXRpb24gPSB0eXBlb2YgcG9zaXRpb24yID09PSBcIm9iamVjdFwiO1xuICAgIGlmICghaGFzUHVibGljSWQpIHtcbiAgICAgIGNvbnNvbGUud2FybihgQW4gJHt0eXBlfSBpcyBtaXNzaW5nIGEgUHVibGljIElEYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBsYXllclRyYW5zZm9ybWF0aW9uID0gYCR7dHlwZVF1YWxpZmllcn1fJHtwdWJsaWNJZC5yZXBsYWNlKC9cXC8vZywgXCI6XCIpfWA7XG4gICAgY29uc3QgcHJpbWFyeTIgPSBbXTtcbiAgICBjb25zdCBhcHBsaWVkID0gW107XG4gICAgT2JqZWN0LmtleXMob3B0aW9uczIpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKCFvYmplY3RIYXNLZXkyKHByaW1hcnksIGtleSkpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHsgcXVhbGlmaWVyIH0gPSBwcmltYXJ5W2tleV07XG4gICAgICBwcmltYXJ5Mi5wdXNoKGAke3F1YWxpZmllcn1fJHtvcHRpb25zMltrZXldfWApO1xuICAgIH0pO1xuICAgIGxheWVyRWZmZWN0cy5mb3JFYWNoKChlZmZlY3QpID0+IHtcbiAgICAgIE9iamVjdC5rZXlzKGVmZmVjdCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGlmICghb2JqZWN0SGFzS2V5MihwcmltYXJ5LCBrZXkpKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgeyBxdWFsaWZpZXIgfSA9IHByaW1hcnlba2V5XTtcbiAgICAgICAgcHJpbWFyeTIucHVzaChgJHtxdWFsaWZpZXJ9XyR7ZWZmZWN0W2tleV19YCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAoaGFzUG9zaXRpb24pIHtcbiAgICAgIE9iamVjdC5rZXlzKHBvc2l0aW9uMikuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGlmICghb2JqZWN0SGFzS2V5Mihwb3NpdGlvbiwga2V5KSlcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHsgcXVhbGlmaWVyIH0gPSBwb3NpdGlvbltrZXldO1xuICAgICAgICBhcHBsaWVkLnB1c2goYCR7cXVhbGlmaWVyfV8ke3Bvc2l0aW9uMltrZXldfWApO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZsYWdzMi5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmICghb2JqZWN0SGFzS2V5MihmbGFncywga2V5KSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3QgeyBxdWFsaWZpZXIsIHByZWZpeCB9ID0gZmxhZ3Nba2V5XTtcbiAgICAgIHByaW1hcnkyLnB1c2goYCR7cHJlZml4fV8ke3F1YWxpZmllcn1gKTtcbiAgICB9KTtcbiAgICBsYXllclRyYW5zZm9ybWF0aW9uID0gYCR7bGF5ZXJUcmFuc2Zvcm1hdGlvbn0sJHtwcmltYXJ5Mi5qb2luKFwiLFwiKX1gO1xuICAgIGxheWVyVHJhbnNmb3JtYXRpb24gPSBgJHtsYXllclRyYW5zZm9ybWF0aW9ufS9mbF9sYXllcl9hcHBseSxmbF9ub19vdmVyZmxvd2A7XG4gICAgaWYgKGFwcGxpZWQubGVuZ3RoID4gMCkge1xuICAgICAgbGF5ZXJUcmFuc2Zvcm1hdGlvbiA9IGAke2xheWVyVHJhbnNmb3JtYXRpb259LCR7YXBwbGllZC5qb2luKFwiLFwiKX1gO1xuICAgIH1cbiAgICBjbGRBc3NldC5hZGRUcmFuc2Zvcm1hdGlvbihsYXllclRyYW5zZm9ybWF0aW9uKTtcbiAgfVxuICByZXR1cm4ge307XG59XG5cbi8vIHNyYy9wbHVnaW5zL3ZlcnNpb24udHNcbnZhciB2ZXJzaW9uX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHZlcnNpb25fZXhwb3J0cywge1xuICBhc3NldFR5cGVzOiAoKSA9PiBhc3NldFR5cGVzMTcsXG4gIHBsdWdpbjogKCkgPT4gcGx1Z2luMTcsXG4gIHByb3BzOiAoKSA9PiBwcm9wczE3XG59KTtcbnZhciBwcm9wczE3ID0gW1widmVyc2lvblwiXTtcbnZhciBhc3NldFR5cGVzMTcgPSBbXCJpbWFnZVwiLCBcImltYWdlc1wiLCBcInZpZGVvXCIsIFwidmlkZW9zXCJdO1xuZnVuY3Rpb24gcGx1Z2luMTcocHJvcHMyMCkge1xuICBjb25zdCB7IGNsZEFzc2V0LCBvcHRpb25zIH0gPSBwcm9wczIwO1xuICBjb25zdCB7IHZlcnNpb24gfSA9IG9wdGlvbnM7XG4gIGlmICh0eXBlb2YgdmVyc2lvbiA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdmVyc2lvbiA9PT0gXCJudW1iZXJcIikge1xuICAgIGNsZEFzc2V0LnNldFZlcnNpb24oYCR7dmVyc2lvbn1gLnJlcGxhY2UoXCJ2XCIsIFwiXCIpKTtcbiAgfVxuICByZXR1cm4ge307XG59XG5cbi8vIHNyYy9wbHVnaW5zL3ZpZGVvLnRzXG52YXIgdmlkZW9fZXhwb3J0cyA9IHt9O1xuX19leHBvcnQodmlkZW9fZXhwb3J0cywge1xuICBhc3NldFR5cGVzOiAoKSA9PiBhc3NldFR5cGVzMTgsXG4gIHBsdWdpbjogKCkgPT4gcGx1Z2luMTgsXG4gIHByb3BzOiAoKSA9PiBwcm9wczE4XG59KTtcbmltcG9ydCB7IG9iamVjdEhhc0tleSBhcyBvYmplY3RIYXNLZXkzIH0gZnJvbSBcIkBjbG91ZGluYXJ5LXV0aWwvdXRpbFwiO1xudmFyIHByb3BzMTggPSBbLi4uT2JqZWN0LmtleXModmlkZW8pXTtcbnZhciBhc3NldFR5cGVzMTggPSBbXCJ2aWRlb1wiLCBcInZpZGVvc1wiXTtcbmZ1bmN0aW9uIHBsdWdpbjE4KHByb3BzMjApIHtcbiAgY29uc3QgeyBjbGRBc3NldCwgb3B0aW9ucyB9ID0gcHJvcHMyMDtcbiAgT2JqZWN0LmtleXMob3B0aW9ucykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgaWYgKCFvYmplY3RIYXNLZXkzKHZpZGVvLCBrZXkpKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHsgcHJlZml4LCBxdWFsaWZpZXIsIGNvbnZlcnRlcnMgfSA9IHZpZGVvW2tleV07XG4gICAgY29uc3QgdHJhbnNmb3JtYXRpb24gPSBjb25zdHJ1Y3RUcmFuc2Zvcm1hdGlvbih7XG4gICAgICBwcmVmaXgsXG4gICAgICBxdWFsaWZpZXIsXG4gICAgICB2YWx1ZTogb3B0aW9uc1trZXldLFxuICAgICAgY29udmVydGVyc1xuICAgIH0pO1xuICAgIGNsZEFzc2V0LmFkZFRyYW5zZm9ybWF0aW9uKHRyYW5zZm9ybWF0aW9uKTtcbiAgfSk7XG4gIHJldHVybiB7fTtcbn1cblxuLy8gc3JjL3BsdWdpbnMvem9vbXBhbi50c1xudmFyIHpvb21wYW5fZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoem9vbXBhbl9leHBvcnRzLCB7XG4gIGFzc2V0VHlwZXM6ICgpID0+IGFzc2V0VHlwZXMxOSxcbiAgcGx1Z2luOiAoKSA9PiBwbHVnaW4xOSxcbiAgcHJvcHM6ICgpID0+IHByb3BzMTlcbn0pO1xudmFyIHByb3BzMTkgPSBbXCJ6b29tcGFuXCJdO1xudmFyIGFzc2V0VHlwZXMxOSA9IFtcImltYWdlXCIsIFwiaW1hZ2VzXCJdO1xuZnVuY3Rpb24gcGx1Z2luMTkocHJvcHMyMCkge1xuICBjb25zdCB7IGNsZEFzc2V0LCBvcHRpb25zIH0gPSBwcm9wczIwO1xuICBjb25zdCB7IHpvb21wYW4gPSBmYWxzZSB9ID0gb3B0aW9ucztcbiAgY29uc3Qgb3ZlcnJpZGVzID0ge1xuICAgIGZvcm1hdDogdm9pZCAwXG4gIH07XG4gIGlmICh6b29tcGFuID09PSB0cnVlKSB7XG4gICAgY2xkQXNzZXQuZWZmZWN0KFwiZV96b29tcGFuXCIpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB6b29tcGFuID09PSBcInN0cmluZ1wiKSB7XG4gICAgaWYgKHpvb21wYW4gPT09IFwibG9vcFwiKSB7XG4gICAgICBjbGRBc3NldC5lZmZlY3QoXCJlX3pvb21wYW5cIik7XG4gICAgICBjbGRBc3NldC5lZmZlY3QoXCJlX2xvb3BcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsZEFzc2V0LmVmZmVjdChgZV96b29tcGFuOiR7em9vbXBhbn1gKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHpvb21wYW4gPT09IFwib2JqZWN0XCIpIHtcbiAgICBsZXQgem9vbXBhbkVmZmVjdCA9IFwiZV96b29tcGFuXCI7XG4gICAgaWYgKHR5cGVvZiB6b29tcGFuLm9wdGlvbnMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHpvb21wYW5FZmZlY3QgPSBgJHt6b29tcGFuRWZmZWN0fSR7em9vbXBhbi5vcHRpb25zfWA7XG4gICAgfVxuICAgIGNsZEFzc2V0LmVmZmVjdCh6b29tcGFuRWZmZWN0KTtcbiAgICBsZXQgbG9vcEVmZmVjdDtcbiAgICBpZiAoem9vbXBhbi5sb29wID09PSB0cnVlKSB7XG4gICAgICBsb29wRWZmZWN0ID0gXCJlX2xvb3BcIjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB6b29tcGFuLmxvb3AgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGxvb3BFZmZlY3QgPSBgZV9sb29wJHt6b29tcGFuLmxvb3B9YDtcbiAgICB9XG4gICAgaWYgKGxvb3BFZmZlY3QpIHtcbiAgICAgIGNsZEFzc2V0LmVmZmVjdChsb29wRWZmZWN0KTtcbiAgICB9XG4gIH1cbiAgaWYgKHpvb21wYW4gIT09IGZhbHNlKSB7XG4gICAgb3ZlcnJpZGVzLmZvcm1hdCA9IFwiZ2lmXCI7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBvcHRpb25zOiBvdmVycmlkZXNcbiAgfTtcbn1cblxuLy8gc3JjL2xpYi9jbG91ZGluYXJ5LnRzXG52YXIgdHJhbnNmb3JtYXRpb25QbHVnaW5zID0gW1xuICBnZW5lcmF0aXZlX3JlcGxhY2VfZXhwb3J0cyxcbiAgcmVjb2xvcl9leHBvcnRzLFxuICByZW1vdmVfZXhwb3J0cyxcbiAgcmVtb3ZlX2JhY2tncm91bmRfZXhwb3J0cyxcbiAgcmVzdG9yZV9leHBvcnRzLFxuICByYXdfdHJhbnNmb3JtYXRpb25zX2V4cG9ydHMsXG4gIGNyb3BwaW5nX2V4cG9ydHMsXG4gIGRlZmF1bHRfaW1hZ2VfZXhwb3J0cyxcbiAgZWZmZWN0c19leHBvcnRzLFxuICBmaWxsX2JhY2tncm91bmRfZXhwb3J0cyxcbiAgZmxhZ3NfZXhwb3J0cyxcbiAgb3ZlcmxheXNfZXhwb3J0cyxcbiAgc2FuaXRpemVfZXhwb3J0cyxcbiAgbmFtZWRfdHJhbnNmb3JtYXRpb25zX2V4cG9ydHMsXG4gIHNlb19leHBvcnRzLFxuICB1bmRlcmxheXNfZXhwb3J0cyxcbiAgdmVyc2lvbl9leHBvcnRzLFxuICB2aWRlb19leHBvcnRzLFxuICB6b29tcGFuX2V4cG9ydHNcbl07XG5mdW5jdGlvbiBjb25zdHJ1Y3RDbG91ZGluYXJ5VXJsKHsgb3B0aW9ucywgY29uZmlnID0ge30sIGFuYWx5dGljcyB9KSB7XG4gIGlmIChhbmFseXRpY3MgPT09IGZhbHNlKSB7XG4gICAgaWYgKHR5cGVvZiAoY29uZmlnID09IG51bGwgPyB2b2lkIDAgOiBjb25maWcudXJsKSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY29uZmlnLnVybCA9IHt9O1xuICAgIH1cbiAgICBjb25maWcudXJsLmFuYWx5dGljcyA9IGZhbHNlO1xuICB9XG4gIGNvbnN0IGNsZCA9IG5ldyBDbG91ZGluYXJ5KGNvbmZpZyk7XG4gIGlmICh0eXBlb2YgKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuc3JjKSAhPT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IEVycm9yKGBGYWlsZWQgdG8gY29uc3RydWN0IENsb3VkaW5hcnkgVVJMOiBNaXNzaW5nIHNvdXJjZSAoc3JjKSBpbiBvcHRpb25zYCk7XG4gIH1cbiAgaWYgKCEob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5hc3NldFR5cGUpKSB7XG4gICAgb3B0aW9ucy5hc3NldFR5cGUgPSBcImltYWdlXCI7XG4gIH1cbiAgY29uc3QgcHJvcHNDaGVjayA9IFtdO1xuICB0cmFuc2Zvcm1hdGlvblBsdWdpbnMuZm9yRWFjaCgoeyBwcm9wczogcHJvcHMyMCA9IFtdIH0pID0+IHtcbiAgICBwcm9wczIwLmZvckVhY2goKHByb3ApID0+IHtcbiAgICAgIGlmIChwcm9wc0NoZWNrLmluY2x1ZGVzKHByb3ApKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgT3B0aW9uICR7cHJvcH0gYWxyZWFkeSBleGlzdHMhYCk7XG4gICAgICB9XG4gICAgICBwcm9wc0NoZWNrLnB1c2gocHJvcCk7XG4gICAgfSk7XG4gIH0pO1xuICBjb25zdCBwYXJzZWRPcHRpb25zID0ge307XG4gIGxldCBwdWJsaWNJZDtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLnNyYyA9PT0gXCJzdHJpbmdcIiAmJiAvXmh0dHBzPzpcXC9cXC8vLnRlc3Qob3B0aW9ucy5zcmMpKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHBhcnRzID0gcGFyc2VVcmwob3B0aW9ucy5zcmMpO1xuICAgICAgcHVibGljSWQgPSBwYXJ0cyA9PSBudWxsID8gdm9pZCAwIDogcGFydHMucHVibGljSWQ7XG4gICAgICBwYXJzZWRPcHRpb25zLnNlb1N1ZmZpeCA9IHBhcnRzID09IG51bGwgPyB2b2lkIDAgOiBwYXJ0cy5zZW9TdWZmaXg7XG4gICAgICBwYXJzZWRPcHRpb25zLnZlcnNpb24gPSBwYXJ0cyA9PSBudWxsID8gdm9pZCAwIDogcGFydHMudmVyc2lvbjtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgfVxuICB9XG4gIGlmICghcHVibGljSWQpIHtcbiAgICBwdWJsaWNJZCA9IG9wdGlvbnMuc3JjO1xuICB9XG4gIE9iamVjdC5rZXlzKHBhcnNlZE9wdGlvbnMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGlmIChvYmplY3RIYXNLZXk0KG9wdGlvbnMsIGtleSkpXG4gICAgICByZXR1cm47XG4gICAgb3B0aW9uc1trZXldID0gcGFyc2VkT3B0aW9uc1trZXldO1xuICB9KTtcbiAgbGV0IGNsZEFzc2V0ID0gdm9pZCAwO1xuICBpZiAoW1wiaW1hZ2VcIiwgXCJpbWFnZXNcIl0uaW5jbHVkZXMob3B0aW9ucy5hc3NldFR5cGUpKSB7XG4gICAgY2xkQXNzZXQgPSBjbGQuaW1hZ2UocHVibGljSWQpO1xuICB9IGVsc2UgaWYgKFtcInZpZGVvXCIsIFwidmlkZW9zXCJdLmluY2x1ZGVzKG9wdGlvbnMuYXNzZXRUeXBlKSkge1xuICAgIGNsZEFzc2V0ID0gY2xkLnZpZGVvKHB1YmxpY0lkKTtcbiAgfVxuICBpZiAodHlwZW9mIGNsZEFzc2V0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhc3NldCB0eXBlLlwiKTtcbiAgfVxuICB0cmFuc2Zvcm1hdGlvblBsdWdpbnMuZm9yRWFjaCgoeyBwbHVnaW46IHBsdWdpbjIwLCBhc3NldFR5cGVzOiBhc3NldFR5cGVzMjAsIHByb3BzOiBwcm9wczIwLCBzdHJpY3Q6IHN0cmljdDIgfSkgPT4ge1xuICAgIGNvbnN0IHN1cHBvcnRlZEFzc2V0VHlwZSA9IHR5cGVvZiAob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5hc3NldFR5cGUpICE9PSBcInVuZGVmaW5lZFwiICYmIGFzc2V0VHlwZXMyMC5pbmNsdWRlcyhvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmFzc2V0VHlwZSk7XG4gICAgY29uc3Qgb3B0aW9uc0tleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgICBjb25zdCBhdHRlbXB0ZWRVc2UgPSBwcm9wczIwLm1hcCgocHJvcCkgPT4gb3B0aW9uc0tleXMuaW5jbHVkZXMocHJvcCkpLmZpbHRlcigoaXNVc2VkKSA9PiAhIWlzVXNlZCkubGVuZ3RoID4gMDtcbiAgICBpZiAoIXN1cHBvcnRlZEFzc2V0VHlwZSkge1xuICAgICAgaWYgKGF0dGVtcHRlZFVzZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oYE9uZSBvZiB0aGUgZm9sbG93aW5nIHByb3BzIFske3Byb3BzMjAuam9pbihcIiwgXCIpfV0gd2FzIHVzZWQgd2l0aCBhbiB1bnN1cHBvcnRlZCBhc3NldCB0eXBlIFske29wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuYXNzZXRUeXBlfV1gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuc3RyaWN0VHJhbnNmb3JtYXRpb25zICYmICFzdHJpY3QyKSB7XG4gICAgICBpZiAoYXR0ZW1wdGVkVXNlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgT25lIG9mIHRoZSBmb2xsb3dpbmcgcHJvcHMgWyR7cHJvcHMyMC5qb2luKFwiLCBcIil9XSB3YXMgdXNlZCB0aGF0IGlzIG5vdCBzdXBwb3J0ZWQgd2l0aCBTdHJpY3QgVHJhbnNmb3JtYXRpb25zLmApO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHRzID0gcGx1Z2luMjAoe1xuICAgICAgY2xkQXNzZXQsXG4gICAgICBvcHRpb25zXG4gICAgfSk7XG4gICAgY29uc3QgeyBvcHRpb25zOiBwbHVnaW5PcHRpb25zIH0gPSByZXN1bHRzIHx8IHsgb3B0aW9uczogdm9pZCAwIH07XG4gICAgaWYgKChwbHVnaW5PcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBwbHVnaW5PcHRpb25zLmZvcm1hdCkgJiYgb3B0aW9ucykge1xuICAgICAgb3B0aW9ucy5mb3JtYXQgPSBwbHVnaW5PcHRpb25zLmZvcm1hdDtcbiAgICB9XG4gICAgaWYgKChwbHVnaW5PcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBwbHVnaW5PcHRpb25zLndpZHRoKSAmJiBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zLnJlc2l6ZSA9IHtcbiAgICAgICAgd2lkdGg6IHBsdWdpbk9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IHBsdWdpbk9wdGlvbnMud2lkdGhcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbiAgaWYgKChvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLnJlc2l6ZSkgJiYgIW9wdGlvbnMuc3RyaWN0VHJhbnNmb3JtYXRpb25zKSB7XG4gICAgY29uc3QgeyB3aWR0aCwgY3JvcCA9IFwibGltaXRcIiB9ID0gb3B0aW9ucy5yZXNpemU7XG4gICAgY2xkQXNzZXQuZWZmZWN0KGBjXyR7Y3JvcH0sd18ke3dpZHRofWApO1xuICB9XG4gIGNsZEFzc2V0LnNldERlbGl2ZXJ5VHlwZSgob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5kZWxpdmVyeVR5cGUpIHx8IFwidXBsb2FkXCIpO1xuICBpZiAoIW9wdGlvbnMuc3RyaWN0VHJhbnNmb3JtYXRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuZHByKSB7XG4gICAgICBsZXQgZHByID0gb3B0aW9ucy5kcHI7XG4gICAgICBpZiAodHlwZW9mIGRwciA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBkcHIgPSBkcHIudG9GaXhlZCgxKTtcbiAgICAgIH1cbiAgICAgIGNsZEFzc2V0LmFkZFRyYW5zZm9ybWF0aW9uKGBkcHJfJHtkcHJ9YCk7XG4gICAgfVxuICAgIGlmICgob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5mb3JtYXQpICE9PSBcImRlZmF1bHRcIikge1xuICAgICAgY2xkQXNzZXQuZm9ybWF0KChvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmZvcm1hdCkgfHwgXCJhdXRvXCIpO1xuICAgIH1cbiAgICBpZiAoKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMucXVhbGl0eSkgIT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICBjbGRBc3NldC5xdWFsaXR5KChvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLnF1YWxpdHkpIHx8IFwiYXV0b1wiKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNsZEFzc2V0LnRvVVJMKHtcbiAgICB0cmFja2VkQW5hbHl0aWNzOiBhbmFseXRpY3NcbiAgfSk7XG59XG5leHBvcnQge1xuICBjb25zdHJ1Y3RDbG91ZGluYXJ5VXJsLFxuICBlZmZlY3RzLFxuICBwb3NpdGlvbixcbiAgcHJpbWFyeSxcbiAgdGV4dCxcbiAgdHJhbnNmb3JtYXRpb25QbHVnaW5zXG59O1xuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZ2V0IiwiZW51bWVyYWJsZSIsIkNsb3VkaW5hcnkiLCJwYXJzZVVybCIsIm9iamVjdEhhc0tleSIsIm9iamVjdEhhc0tleTQiLCJjcm9wcGluZ19leHBvcnRzIiwiYXNzZXRUeXBlcyIsIm5vcm1hbGl6ZU51bWJlclBhcmFtZXRlciIsInBsdWdpbiIsInByb3BzIiwiY3JvcHNBc3BlY3RSYXRpbyIsImNyb3BzR3Jhdml0eUF1dG8iLCJjcm9wc1dpdGhab29tIiwicGFyYW0iLCJwYXJzZUludCIsInByb3BzMjAiLCJjbGRBc3NldCIsIm9wdGlvbnMiLCJhc3BlY3RSYXRpbyIsIndpZHRoIiwiZGVmYXVsdFdpZHRoIiwiaGVpZ2h0IiwiZGVmYXVsdEhlaWdodCIsIndpZHRoUmVzaXplIiwiZGVmYXVsdFdpZHRoUmVzaXplIiwiY3JvcCIsIm92ZXJyaWRlcyIsImhhc0RlZmluZWREaW1lbnNpb25zIiwiaGFzVmFsaWRBc3BlY3RSYXRpbyIsImluY2x1ZGVzIiwidHJhbnNmb3JtYXRpb25TdHJpbmciLCJncmF2aXR5IiwiY29uc29sZSIsIndhcm4iLCJqb2luIiwiem9vbSIsImVmZmVjdCIsImRlZmF1bHRfaW1hZ2VfZXhwb3J0cyIsImFzc2V0VHlwZXMyIiwicGx1Z2luMiIsInByb3BzMiIsImdldEZvcm1hdCIsImRlZmF1bHRJbWFnZSIsImRlZmF1bHRJbWFnZUlkIiwicmVwbGFjZSIsImFkZFRyYW5zZm9ybWF0aW9uIiwiZWZmZWN0c19leHBvcnRzIiwiYXNzZXRUeXBlczMiLCJwbHVnaW4zIiwicHJvcHMzIiwidGVzdENvbG9ySXNIZXgiLCJjb252ZXJ0Q29sb3JIZXhUb1JnYiIsImNvbnZlcnRlcnNDb2xvcnMiLCJ0ZXN0IiwiY29udmVydCIsInByaW1hcnkiLCJxdWFsaWZpZXIiLCJwb3NpdGlvbiIsImFuZ2xlIiwieCIsInkiLCJ0ZXh0IiwiYWxpZ25tZW50Iiwib3JkZXIiLCJhbnRpYWxpYXMiLCJib3JkZXIiLCJsb2NhdGlvbiIsImNvbG9yIiwiY29udmVydGVycyIsImZvbnRGYW1pbHkiLCJmb250U2l6ZSIsImZvbnRTdHlsZSIsImZvbnRXZWlnaHQiLCJoaW50aW5nIiwibGV0dGVyU3BhY2luZyIsImxpbmVTcGFjaW5nIiwic3Ryb2tlIiwidGV4dERlY29yYXRpb24iLCJlZmZlY3RzIiwiYXJ0IiwicHJlZml4IiwiYXV0b0JyaWdodG5lc3MiLCJhdXRvQ29sb3IiLCJhdXRvQ29udHJhc3QiLCJhc3Npc3RDb2xvcmJsaW5kIiwiYmFja2dyb3VuZCIsImJsYWNrd2hpdGUiLCJibHVyIiwiYmx1ckZhY2VzIiwiYmx1clJlZ2lvbiIsImJyaWdodG5lc3MiLCJicmlnaHRuZXNzSFNCIiwiY2FydG9vbmlmeSIsImNvbG9yaXplIiwiY29udHJhc3QiLCJkaXN0b3J0IiwiZmlsbExpZ2h0IiwiZ2FtbWEiLCJncmFkaWVudEZhZGUiLCJncmF5c2NhbGUiLCJpbXByb3ZlIiwibXVsdGlwbHkiLCJuZWdhdGUiLCJvaWxQYWludCIsIm9wYWNpdHkiLCJvdXRsaW5lIiwib3ZlcmxheSIsInBpeGVsYXRlIiwicGl4ZWxhdGVGYWNlcyIsInBpeGVsYXRlUmVnaW9uIiwicmFkaXVzIiwicmVkZXllIiwicmVwbGFjZUNvbG9yIiwic2F0dXJhdGlvbiIsInNjcmVlbiIsInNlcGlhIiwic2hhZG93Iiwic2hhcnBlbiIsInNoZWFyIiwic2ltdWxhdGVDb2xvcmJsaW5kIiwidGludCIsInRyaW0iLCJ1bnNoYXJwTWFzayIsInZlY3Rvcml6ZSIsInZpYnJhbmNlIiwidmlnbmV0dGUiLCJmbGFncyIsImFuaW1hdGVkIiwiYW55Rm9ybWF0IiwiYXBuZyIsImF0dGFjaG1lbnQiLCJhd2VicCIsImNsaXAiLCJjbGlwRXZlbm9kZCIsImN1dHRlciIsImRyYWNvIiwiZm9yY2VJY2MiLCJmb3JjZVN0cmlwIiwiZ2V0aW5mbyIsImdyb3VwNCIsImhsc3YzIiwiaWdub3JlQXNwZWN0UmF0aW8iLCJpZ25vcmVNYXNrQ2hhbm5lbHMiLCJpbW11dGFibGVDYWNoZSIsImtlZXBBdHRyaWJ1dGlvbiIsImtlZXBEYXIiLCJrZWVwSXB0YyIsImxheWVyQXBwbHkiLCJsb3NzeSIsIm1vbm8iLCJub092ZXJmbG93Iiwibm9TdHJlYW0iLCJwbmc4IiwicG5nMjQiLCJwbmczMiIsInByZXNlcnZlVHJhbnNwYXJlbmN5IiwicHJvZ3Jlc3NpdmUiLCJyYXN0ZXJpemUiLCJyZWdpb25SZWxhdGl2ZSIsInJlbGF0aXZlIiwicmVwbGFjZUltYWdlIiwic2FuaXRpemUiLCJzcGxpY2UiLCJzdHJlYW1pbmdBdHRhY2htZW50Iiwic3RyaXBQcm9maWxlIiwidGV4dERpc2FsbG93T3ZlcmZsb3ciLCJ0ZXh0Tm9UcmltIiwidGlmOEx6dyIsInRpbGVkIiwidHJ1bmNhdGVUcyIsIndhdmVmb3JtIiwidmlkZW8iLCJzdHJlYW1pbmdQcm9maWxlIiwiY29uc3RydWN0VHJhbnNmb3JtYXRpb24iLCJ2YWx1ZSIsInRyYW5zZm9ybWF0aW9uIiwidHJhbnNmb3JtYXRpb25WYWx1ZSIsImZvckVhY2giLCJwcm9tcHRBcnJheVRvU3RyaW5nIiwicHJvbXB0QXJyYXkiLCJrZXlzIiwidHJhbnNmb3JtYXRpb25TdHJpbmdzIiwiY29uc3RydWN0VHJhbnNmb3JtYXRpb25TdHJpbmciLCJmaWx0ZXIiLCJ0IiwiQXJyYXkiLCJpc0FycmF5IiwiZWZmZWN0c1NldCIsImVmZmVjdHMyIiwib3B0aW9uczIiLCJtYXAiLCJrZXkiLCJmbGFnc19leHBvcnRzIiwiYXNzZXRUeXBlczQiLCJwbHVnaW40IiwicHJvcHM0Iiwic3VwcG9ydGVkRmxhZ3MiLCJlbnRyaWVzIiwiXyIsImZsYWdzMiIsImxlbmd0aCIsImZsYWciLCJhZGRGbGFnIiwiZmlsbF9iYWNrZ3JvdW5kX2V4cG9ydHMiLCJhc3NldFR5cGVzNSIsInBsdWdpbjUiLCJwcm9wczUiLCJkZWZhdWx0Q3JvcCIsImZpbGxCYWNrZ3JvdW5kIiwicHJvcGVydGllcyIsInByb21wdCIsInVuc2hpZnQiLCJwdXNoIiwiZ2VuZXJhdGl2ZV9yZXBsYWNlX2V4cG9ydHMiLCJhc3NldFR5cGVzNiIsInBsdWdpbjYiLCJwcm9wczYiLCJmcm9tIiwidG8iLCJwcmVzZXJ2ZUdlb21ldHJ5IiwibmFtZWRfdHJhbnNmb3JtYXRpb25zX2V4cG9ydHMiLCJhc3NldFR5cGVzNyIsInBsdWdpbjciLCJwcm9wczciLCJzdHJpY3QiLCJ0cmFuc2Zvcm1hdGlvbnMiLCJvdmVybGF5c19leHBvcnRzIiwiREVGQVVMVF9URVhUX09QVElPTlMiLCJhc3NldFR5cGVzOCIsInBsdWdpbjgiLCJwcm9wczgiLCJlbmNvZGVCYXNlNjQiLCJzb3J0QnlLZXkiLCJzdXBwb3J0ZWRGbGFnczIiLCJ0ZXh0MiIsIm92ZXJsYXlzIiwidHlwZSIsInR5cGVRdWFsaWZpZXIiLCJhcHBseU92ZXJsYXkiLCJwdWJsaWNJZCIsInVybCIsInBvc2l0aW9uMiIsInRleHQzIiwibGF5ZXJFZmZlY3RzIiwiYXBwbGllZEVmZmVjdHMiLCJsYXllckZsYWdzIiwiYXBwbGllZEZsYWdzIiwiX2EiLCJoYXNQdWJsaWNJZCIsImhhc1VybCIsImhhc1RleHQiLCJoYXNQb3NpdGlvbiIsImxheWVyVHJhbnNmb3JtYXRpb24iLCJwcmltYXJ5MiIsImFwcGxpZWQiLCJlZmZlY3RRdWFsaWZpZXIiLCJ0ZXh0VHJhbnNmb3JtYXRpb25zIiwidGV4dE9wdGlvbnMiLCJzb3J0ZWRUZXh0T3B0aW9ucyIsInRleHRPcHRpb24iLCJ0ZXh0VmFsdWUiLCJzcGVjaWFsQ2hhcmFjdGVycyIsImxheWVyVGV4dCIsImNoYXJhY3RlciIsInJhd190cmFuc2Zvcm1hdGlvbnNfZXhwb3J0cyIsImFzc2V0VHlwZXM5IiwicGx1Z2luOSIsInByb3BzOSIsInJhd1RyYW5zZm9ybWF0aW9ucyIsInJlY29sb3JfZXhwb3J0cyIsImFzc2V0VHlwZXMxMCIsInBsdWdpbjEwIiwicHJvcHMxMCIsInJlY29sb3IiLCJyZWNvbG9yT3B0aW9ucyIsIm11bHRpcGxlIiwicmVtb3ZlX2V4cG9ydHMiLCJhc3NldFR5cGVzMTEiLCJwbHVnaW4xMSIsInByb3BzMTEiLCJyZW1vdmUiLCJyZW1vdmVPcHRpb25zIiwicmVnaW9uIiwiaGFzUHJvbXB0IiwiaGFzUmVnaW9uIiwiRXJyb3IiLCJyZWdpb25BcnJheVRvU3RyaW5nIiwicmVtb3ZlU2hhZG93IiwicmVnaW9uQXJyYXkiLCJpbmRleGVzIiwicmVnaW9uU3RyaW5nIiwiaW5kZXgiLCJyZW1vdmVfYmFja2dyb3VuZF9leHBvcnRzIiwiYXNzZXRUeXBlczEyIiwicGx1Z2luMTIiLCJwcm9wczEyIiwicmVtb3ZlQmFja2dyb3VuZCIsInJlc3RvcmVfZXhwb3J0cyIsImFzc2V0VHlwZXMxMyIsInBsdWdpbjEzIiwicHJvcHMxMyIsInJlc3RvcmUiLCJzYW5pdGl6ZV9leHBvcnRzIiwiYXNzZXRUeXBlczE0IiwicGx1Z2luMTQiLCJwcm9wczE0Iiwic2hvdWxkQXBwbHlTYW5pdGl6ZXIiLCJmb3JtYXQiLCJwdWJsaWNJRCIsImVuZHNXaXRoIiwic2VvX2V4cG9ydHMiLCJhc3NldFR5cGVzMTUiLCJwbHVnaW4xNSIsInByb3BzMTUiLCJzZW9TdWZmaXgiLCJkZWxpdmVyeVR5cGUiLCJzZXRTdWZmaXgiLCJ1bmRlcmxheXNfZXhwb3J0cyIsImFzc2V0VHlwZXMxNiIsInBsdWdpbjE2IiwicHJvcHMxNiIsIm9iamVjdEhhc0tleTIiLCJ1bmRlcmxheSIsInVuZGVybGF5cyIsImFwcGx5VW5kZXJsYXkiLCJ1bmRlcmxheU9wdGlvbnMiLCJ2ZXJzaW9uX2V4cG9ydHMiLCJhc3NldFR5cGVzMTciLCJwbHVnaW4xNyIsInByb3BzMTciLCJ2ZXJzaW9uIiwic2V0VmVyc2lvbiIsInZpZGVvX2V4cG9ydHMiLCJhc3NldFR5cGVzMTgiLCJwbHVnaW4xOCIsInByb3BzMTgiLCJvYmplY3RIYXNLZXkzIiwiem9vbXBhbl9leHBvcnRzIiwiYXNzZXRUeXBlczE5IiwicGx1Z2luMTkiLCJwcm9wczE5Iiwiem9vbXBhbiIsInpvb21wYW5FZmZlY3QiLCJsb29wRWZmZWN0IiwibG9vcCIsInRyYW5zZm9ybWF0aW9uUGx1Z2lucyIsImNvbnN0cnVjdENsb3VkaW5hcnlVcmwiLCJjb25maWciLCJhbmFseXRpY3MiLCJjbGQiLCJzcmMiLCJhc3NldFR5cGUiLCJwcm9wc0NoZWNrIiwicHJvcCIsInBhcnNlZE9wdGlvbnMiLCJwYXJ0cyIsImUiLCJpbWFnZSIsInBsdWdpbjIwIiwiYXNzZXRUeXBlczIwIiwic3RyaWN0MiIsInN1cHBvcnRlZEFzc2V0VHlwZSIsIm9wdGlvbnNLZXlzIiwiYXR0ZW1wdGVkVXNlIiwiaXNVc2VkIiwic3RyaWN0VHJhbnNmb3JtYXRpb25zIiwicmVzdWx0cyIsInBsdWdpbk9wdGlvbnMiLCJyZXNpemUiLCJzZXREZWxpdmVyeVR5cGUiLCJkcHIiLCJ0b0ZpeGVkIiwicXVhbGl0eSIsInRvVVJMIiwidHJhY2tlZEFuYWx5dGljcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cloudinary-util/url-loader/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cloudinary-util/util/dist/index.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@cloudinary-util/util/dist/index.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertColorHexToRgb: () => (/* binding */ convertColorHexToRgb),\n/* harmony export */   encodeBase64: () => (/* binding */ encodeBase64),\n/* harmony export */   getFormat: () => (/* binding */ getFormat),\n/* harmony export */   getPublicId: () => (/* binding */ getPublicId),\n/* harmony export */   getTransformations: () => (/* binding */ getTransformations),\n/* harmony export */   objectHasKey: () => (/* binding */ objectHasKey),\n/* harmony export */   parseUrl: () => (/* binding */ parseUrl),\n/* harmony export */   sortByKey: () => (/* binding */ sortByKey),\n/* harmony export */   testColorIsHex: () => (/* binding */ testColorIsHex)\n/* harmony export */ });\n// src/lib/cloudinary.ts\nvar REGEX_VERSION = /\\/v\\d+\\//;\nvar REGEX_FORMAT = /\\.(ai|avif|gif|png|webp|bmp|bw|djvu|dng|ps|ept|eps|eps3|fbx|flif|gif|glb|gltf|heif|heic|ico|indd|jpg|jpe|jpeg|jp2|wdp|jxr|hdp|obj|pdf|ply|png|psd|arw|cr2|svg|tga|tif|tiff|u3ma|usdz|webp|3g2|3gp|avi|flv|m3u8|ts|m2ts|mts|mov|mkv|mp4|mpeg|mpd|mxf|ogv|webm|wmv)$/i;\nvar REGEX_URL = /https?:\\/\\/(?<host>[^\\/]+)\\/(?<cloudName>[^\\/]+)\\/(?<assetType>image|images|video|videos|raw|files)\\/(?<deliveryType>upload|fetch|private|authenticated|sprite|facebook|twitter|youtube|vimeo)?\\/?(?<signature>s--([a-zA-Z0-9\\_\\-]{8}|[a-zA-Z0-9\\_\\-]{32})--)?\\/?(?<transformations>(?:[^_\\/]+_[^,\\/]+,?\\/?)*\\/)*(?<version>v\\d+|\\w{1,2})\\/(?<publicId>[^\\s]+)$/;\nvar ASSET_TYPES_SEO = [\n    \"images\",\n    \"videos\",\n    \"files\"\n];\nfunction parseUrl(src) {\n    var _a, _b, _c, _d;\n    if (typeof src !== \"string\") {\n        throw new Error(`Failed to parse URL: Invalid src of type ${typeof src}`);\n    }\n    const hasVersion = REGEX_VERSION.test(src);\n    if (!hasVersion) {\n        throw new Error(`Invalid src: Does not include version (Ex: /v1234/)`);\n    }\n    const [baseUrlWithExtension, queryString] = src.split(\"?\");\n    const format = getFormat(baseUrlWithExtension);\n    let baseUrl = baseUrlWithExtension;\n    if (format) {\n        baseUrl = baseUrlWithExtension.replace(new RegExp(`${format}$`), \"\");\n    }\n    const results = baseUrl.match(REGEX_URL);\n    const transformations = (_b = (_a = results == null ? void 0 : results.groups) == null ? void 0 : _a.transformations) == null ? void 0 : _b.split(\"/\").filter((t)=>!!t);\n    const parts = {\n        ...results == null ? void 0 : results.groups,\n        format,\n        seoSuffix: void 0,\n        transformations: transformations || [],\n        queryParams: {},\n        version: ((_c = results == null ? void 0 : results.groups) == null ? void 0 : _c.version) ? parseInt(results.groups.version.replace(\"v\", \"\")) : void 0\n    };\n    if (queryString) {\n        parts.queryParams = queryString.split(\"&\").reduce((prev, curr)=>{\n            const [key, value] = curr.split(\"=\");\n            prev[key] = value;\n            return prev;\n        }, {});\n    }\n    if (parts.assetType && ASSET_TYPES_SEO.includes(parts.assetType)) {\n        const publicIdParts = ((_d = parts.publicId) == null ? void 0 : _d.split(\"/\")) || [];\n        parts.seoSuffix = publicIdParts.pop();\n        parts.publicId = publicIdParts.join(\"/\");\n    }\n    if (parts.publicId) {\n        parts.publicId = decodeURIComponent(parts.publicId);\n    }\n    return parts;\n}\nfunction getPublicId(src) {\n    const { publicId } = parseUrl(src) || {};\n    return publicId;\n}\nfunction getTransformations(src) {\n    const { transformations = [] } = parseUrl(src) || {};\n    return transformations.map((t)=>t.split(\",\"));\n}\nfunction getFormat(src) {\n    const matches = src.match(REGEX_FORMAT);\n    if (matches === null) return;\n    return matches[0];\n}\n// src/lib/colors.ts\nfunction testColorIsHex(value) {\n    if (typeof value !== \"string\") return false;\n    return !!value.startsWith(\"#\");\n}\nfunction convertColorHexToRgb(value) {\n    return `rgb:${value.replace(\"#\", \"\")}`;\n}\n// src/lib/util.ts\nfunction encodeBase64(value) {\n    if (typeof btoa === \"function\") {\n        return btoa(value);\n    }\n    if (typeof Buffer !== \"undefined\") {\n        return Buffer.from(value).toString(\"base64\");\n    }\n}\nfunction objectHasKey(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction sortByKey(array = [], key, type = \"asc\") {\n    function compare(a, b) {\n        let keyA = a[key];\n        let keyB = b[key];\n        if (typeof keyA === \"string\") {\n            keyA = keyA.toLowerCase();\n        }\n        if (typeof keyB === \"string\") {\n            keyB = keyB.toLowerCase();\n        }\n        if (keyA < keyB) {\n            return -1;\n        }\n        if (keyA > keyB) {\n            return 1;\n        }\n        return 0;\n    }\n    let newArray = [\n        ...array\n    ];\n    if (typeof key !== \"string\") return newArray;\n    newArray = newArray.sort(compare);\n    if (type === \"desc\") {\n        return newArray.reverse();\n    }\n    return newArray;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cloudinary-util/util/dist/index.mjs\n");

/***/ })

};
;